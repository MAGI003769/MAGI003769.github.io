{"title":"Java线程的创建与状态","date":"2020-05-12T07:00:00.000Z","date_formatted":{"ll":"May 12, 2020","L":"05/12/2020","MM-DD":"05-12"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/header_imgs/photo-1517842645767-c639042777db.jpeg","link":"post/Java线程的创建与状态","tags":["Java","多线程"],"categories":["Java"],"updated":"2020-05-15T06:14:03.527Z","content":"<p>上一篇讲了线程的基本概念，现在整理一下Java多线程相关实现的知识：线程的各种状态、如何在状态间进行切换、如何创建线程、如何中断线程、<code>volatile</code>关键字以及守护线程的概念。</p>\n<a id=\"more\"></a><h1 id=\"线程的状态\">线程的状态<a href=\"#线程的状态\" title=\"线程的状态\"></a></h1><p><img src=\"https://post-pic.nos-eastchina1.126.net/Java/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81.png\" class=\"φcy\" alt=\"线程的状态\"></p>\n<p>上图展示了一个线程从创建到最终消亡的过程。一般来说有如下几个状态：</p>\n<div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>状态名称</th><th>描述</th></tr>\n</thead><tbody><tr>\n<td><strong>新建状态（New）</strong></td><td>指刚刚创建好的<code>Thread</code>对象，还未调用<code>start()</code>方法</td></tr>\n<tr>\n<td><strong>就绪状态（Ready）</strong></td><td><code>Thread</code>对象已经调用了<code>start()</code>，或从其他状态返回就绪队列中，正在等待JVM调度使用CPU资源执行</td></tr>\n<tr>\n<td><strong>运行状态（Runnable）</strong></td><td><code>Thread</code>对象占用资源，正在执行<code>run()</code>中的代码</td></tr>\n<tr>\n<td><strong>阻塞状态（Blocked）</strong></td><td>线程被锁阻塞，与同步锁有关</td></tr>\n<tr>\n<td><strong>等待状态（Waiting）</strong></td><td>表示线程进入等待状态，说明当前线程需要其他线程完成某些作出特定动作（通知或中断）</td></tr>\n<tr>\n<td><strong>超时等待（Timed_Waiting）</strong></td><td>与一般的Waiting状态区别，只在特定的时长内等待，之后自行返回</td></tr>\n<tr>\n<td><strong>终止状态（Terminated）</strong></td><td>表示当前线程已经执行完毕。<code>run()</code>方法执行到<code>return</code>语句、<code>run()</code>方法补货到异常以及调用<code>stop()</code>都有可能使终止进程</td></tr>\n</tbody></table></div></div><h1 id=\"线程的创建\">线程的创建<a href=\"#线程的创建\" title=\"线程的创建\"></a></h1><p>创建线程有三种方法：</p>\n<ul><li>继承<code>Thread</code>类本身，覆写<code>run()</code>方法</li>\n<li>实现<code>Runnable</code>接口，覆写<code>run()</code>方法，作为参数传入<code>new Thread(new MyRunnable())</code>创建新的线程</li>\n<li>通过 Callable 和 Future 创建线程</li>\n</ul><h1 id=\"线程的中断\">线程的中断<a href=\"#线程的中断\" title=\"线程的中断\"></a></h1><p>其他线程可以通过某特定线程的<code>interupt()</code>方法来中断它，比如下面的例子就使得<code>main</code>线程中断了我们创建的线程<code>t</code>。目标线程需要反复检测自身状态是否是interrupted状态，如果是，就立刻结束运行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1</span>); <span class=\"comment\">// 暂停1毫秒</span></span><br><span class=\"line\">        t.interrupt(); <span class=\"comment\">// 中断t线程</span></span><br><span class=\"line\">        t.join(); <span class=\"comment\">// 等待t线程结束</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"end\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (! isInterrupted()) &#123;</span><br><span class=\"line\">            n ++;</span><br><span class=\"line\">            System.out.println(n + <span class=\"string\">\" hello!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><code>main</code>线程通过调用<code>t.interrupt()</code>方法来中断<code>t</code>线程，单这仅仅是向<code>t</code>线程发出了”中断请求“，而线程<code>t</code>是否可以正确响应，取决于具体的代码实现。另外，当一个线程（e.g. <code>main</code>）调用了另一个线程的<code>join()</code>方法（e.g. <code>t.join()</code>），该线程自身出于等待状态。<strong>如果在这个时候中断这个处于等待状态线程<code>main</code>，那么这个<code>t.join()</code>也会抛出异常<code>InterruptedException</code>。</strong>如果被中断的线程出于阻塞状态（调用了其他线程的<code>join</code>、自身<code>sleep()</code>或者<code>wait()</code>），都是会抛出异常的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        t.interrupt(); <span class=\"comment\">// 中断t线程</span></span><br><span class=\"line\">        t.join(); <span class=\"comment\">// 等待t线程结束</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"end\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Thread hello = <span class=\"keyword\">new</span> HelloThread();</span><br><span class=\"line\">        hello.start(); <span class=\"comment\">// 启动hello线程</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            hello.join(); <span class=\"comment\">// 等待hello线程结束</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"interrupted!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hello.interrupt(); <span class=\"comment\">// 缺少会导致</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!isInterrupted()) &#123;</span><br><span class=\"line\">            n++;</span><br><span class=\"line\">            System.out.println(n + <span class=\"string\">\" hello!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>上面的专段代码中，<code>main</code>线程操作<code>t</code>线程，而<code>t</code>线程中则操作另一个线程<code>hello</code>。我们在<code>main</code>线程中中断<code>t</code>线程，此时<code>t</code>线程出于等待状态，<code>hello</code>线程在执行。这个中断就会导致<code>hello.join()</code>抛出异常，线程<code>t</code>捕获到这个一场之后就会输出<code>Interrupted</code>字符串。需要注意的是，如果缺少了<code>hello.interrupt()</code>的执行，<code>hello</code>这个线程仍会执行，且JVM不会退出。</p>\n<p><img src=\"https://post-pic.nos-eastchina1.126.net/Java/join%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8.jpeg\" class=\"φcy\" alt=\"join抛出异常\"></p>\n<p>另一个中断线程的办法是设置线程的<code>running</code>标志位。比如在外部操作线程<code>t</code>的时候，直接修改<code>t.running = false</code>来结束线程。<strong>在使用这种方法中断线程的时候，需要注意使用<code>volatile</code>关键字标记，以确保每个线程都能够读到更新以后的值。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> running = <span class=\"keyword\">true</span>;</span><br></pre></td></tr></table></figure><p>这里需要讲一下Java虚拟机的内存模型。Java虚拟机中，变量的值保存在<strong>主内存</strong>中。但是当线访问变量时，它会先从主内存中获取一个变量副本，保存在自己的本地的工作内存中。如果线程修改了这个变量，那么它将会在某一时刻写回主内存，<strong>然而这个时间是不确定的</strong>。</p>\n<p><img src=\"https://lh5.googleusercontent.com/proxy/RIgA-8_IDZWieWm34swlPR35ZwbxK-sQTZ4iidY6_VuhIFYnjmYVkRRVD9EmDzAKS-U734JUgQZYJ-odha9xwCh4qi_IJPLcDGEX4d6Xr0aFR5oj5RaHoypuSy8ShGzd722iJmXRcizaSYiNA-xJyeeiOYmCfV2dWR_havUlXqWP0NaG7MYbJ55nPlaRHCmD2qbq8MqeqIRPHKz373JUSuk08Pb2zTA\" class=\"φcy\" alt=\"主内存与工作内存\"></p>\n<p>这样可能就会出现一个值被某一线程修改，而其他线程访问到的依然是更新之前的值，造成了多线程之间共享变量的不一致。因此<code>volatile</code>关键字的作用就是告诉虚拟机：</p>\n<ul><li>每次访问都获取变量的最新值</li>\n<li>每次修改变量之后都立刻写回主内存</li>\n</ul><p><strong>实际上<code>volatile</code>解决的就是变量可见性的问题：当一个线程修改了共享变量之后，其他线程都可以立刻看到修改后的值。</strong></p>\n<h1 id=\"守护线程\">守护线程<a href=\"#守护线程\" title=\"守护线程\"></a></h1><p>守护线程（Daemon Thread）是指为其他线程服务的线程。在JVM中，所有非守护线程都执行完毕后，无论有没有守护线程，虚拟机都会自动退出。因此，JVM退出时，不必关心守护线程是否已结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread t = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">t.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">t.start();</span><br></pre></td></tr></table></figure><h1 id=\"summary\">Summary<a href=\"#summary\" title=\"Summary\"></a></h1><ul><li>常用的创建线程方法：(1) 直接继承<code>Thread</code>类，并覆写<code>run()</code>方法；(2) 实现<code>Runnable</code>接口，并覆写<code>run()</code>方法，这个类作为参数传入<code>new Thread()</code>构造器。</li>\n<li>使用<code>interrupt()</code>可以实现中断线程，当一个处于等待状态的线程被中断时，它调用的其他线程的<code>join()</code>会抛出异常。</li>\n<li><code>volatile</code>能解决可见性问题，及时更新共享变量，避免各线程之间的不一致。</li>\n<li>JVM会在除守护线程之外的其他线程后退出，不比考虑守护线程是否已结束。</li>\n</ul><h1 id=\"references\">References<a href=\"#references\" title=\"References\"></a></h1><ul><li><a href=\"https://www.liaoxuefeng.com/wiki/1252599548343744/1304521607217185\" target=\"_blank\">廖雪峰Java教程</a></li>\n<li><a href=\"https://www.runoob.com/java/java-multithreading.html\" target=\"_blank\">Bunoob - Java教程</a></li>\n<li><a href=\"https://github.com/Snailclimb/JavaGuide\" target=\"_blank\">Java Guide</a></li>\n<li>Java并发编程的艺术</li>\n</ul>","prev":{"title":"Java线程的同步与锁","link":"post/Java线程的同步与锁"},"next":{"title":"Java多线程基础","link":"post/Java多线程基础"},"plink":"https://magi003769.github.io/post/Java线程的创建与状态/","toc":[{"id":"线程的状态","title":"线程的状态","index":"1"},{"id":"线程的创建","title":"线程的创建","index":"2"},{"id":"线程的中断","title":"线程的中断","index":"3"},{"id":"守护线程","title":"守护线程","index":"4"},{"id":"summary","title":"Summary","index":"5"},{"id":"references","title":"References","index":"6"}]}