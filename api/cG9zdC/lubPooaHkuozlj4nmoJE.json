{"title":"平衡二叉树","date":"2019-05-30T07:00:00.000Z","date_formatted":{"ll":"May 30, 2019","L":"05/30/2019","MM-DD":"05-30"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/Data%20Structure%20and%20Algorithm/HD_AVL.jpg","link":"post/平衡二叉树","tags":["Binary Search Tree","LeetCode","Tree"],"categories":["算法数据结构"],"updated":"2019-06-21T06:15:26.000Z","content":"<p>在之前关于BST的讨论中，我们提到了简单的插入逻辑在某些特定条件下会使得BST从树结构退化成类似链表的线性结构，因此会导致搜索的复杂度从<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"7.914ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 3407.5 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">O(logn)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-67\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"0\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"763\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"1153\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"1451\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"1937\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"2417\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"3018\" y=\"0\"></use>\n</g>\n</svg>上升为<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.977ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 2143 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">O(n)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"0\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"763\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"1153\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"1753\" y=\"0\"></use>\n</g>\n</svg>。为了防止这种情况出现，便有了平衡树概念的提出。</p>\n<a id=\"more\"></a><h1 id=\"avl-tree\">AVL Tree<a href=\"#avl-tree\" title=\"AVL Tree\"></a></h1><blockquote>\n<p>AVL由俄罗斯科学家G.M.Adelson-Velsky E.M.Landis在1962年的论文首次提出，是最早的自平衡的自平衡二叉树</p>\n</blockquote>\n<p>AVL中的平衡二叉树并不像完全二叉树那样必须将一层铺满才能在下一层插入节点，它的定义相对宽松：<strong>左子树和右子树深度差不大于1</strong>。这样可以尽可能保持树的结构，为搜索带来便利。为了实现对高度的判别，除了节点的<code>val</code>和左右子节点的引用，我们需要给节点引入一个新的属性<code>height</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">__Node</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, val)</span>:</span></span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.left = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.right = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.height = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure><h1 id=\"平衡因子\">平衡因子<a href=\"#平衡因子\" title=\"平衡因子\"></a></h1><p>那么如何判断一个节点代表的子树是否平衡呢？根据定义我们只需要对每个节点获取其左右子树的<code>height</code>，再用左子树高度减去减去右子树的高度。这样，平衡节点的平衡因子在<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"6.461ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 2781.7 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">[-1, 1]</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMAIN-5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMAIN-5B\" x=\"0\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"278\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-31\" x=\"1057\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-2C\" x=\"1557\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-31\" x=\"2002\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-5D\" x=\"2503\" y=\"0\"></use>\n</g>\n</svg>的区间上，在这个区间范围外即可视为不平衡，需要一系列的操作来将其变为平衡的。这种的操作就是树的旋转。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHeight</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" Returns height of the (sub)tree represented by root \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root.height</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getBalance</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" Get the balance factor of the (sub)tree represented by root \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.getHeight(root.left) - self.getHeight(root.right)</span><br></pre></td></tr></table></figure><h1 id=\"树的旋转\">树的旋转<a href=\"#树的旋转\" title=\"树的旋转\"></a></h1><h2 id=\"旋转操作\">旋转操作<a href=\"#旋转操作\" title=\"旋转操作\"></a></h2><p>在想树里面插入节点的过程中，我们会检测节点是否平衡。如果发现不平衡，则记首个不平衡点为z、该节点到插入新节点路径上的子节点为y、y在路径上的子节点为x。如下面的两幅图所示，我们有两种旋转方向：左旋转与右旋转。一般来说我们把第一个不平衡点z称为<code>root</code>，并且以y为<code>pivot</code>进行旋转。</p>\n<p><img src=\"https://post-pic.nos-eastchina1.126.net/Data%20Structure%20and%20Algorithm/leftRotate.PNG\" class=\"φcy\" alt=\"leftRotate\"></p>\n<p>我们要将<code>pivot</code>新的<code>root</code>返回，原来的根节点 <code>z</code>作为<code>y</code>的左子树。从BST的性质中我们可以得出，<code>T2</code>所代表的子树位于节点<code>z</code>的右侧，所以<code>T2</code>中任意节点的值都比<code>z</code>大，所以在旋转中可以将<code>T2</code>直接转成<code>z</code>的右子树。这样向左旋转后的树结构就变得平衡了。<strong>需要注意的是，我们需要在旋转之后维护一下节点的高度<code>self.height</code>。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def leftRotate(self, z):</span><br><span class=\"line\">    &quot;&quot;&quot; Implement left rotate operation on subtree z&quot;&quot;&quot;</span><br><span class=\"line\">    y &#x3D; z.right</span><br><span class=\"line\">    T2 &#x3D; y.left</span><br><span class=\"line\">        </span><br><span class=\"line\">    # Perform rotation</span><br><span class=\"line\">    y.left &#x3D; z</span><br><span class=\"line\">    z.right &#x3D; T2</span><br><span class=\"line\">        </span><br><span class=\"line\">    # Update height</span><br><span class=\"line\">    z.height &#x3D; 1 + max(self.getHeight(z.left), self.getHeight(z.right))</span><br><span class=\"line\">    y.height &#x3D; 1 + max(self.getHeight(y.left), self.getHeight(y.right))</span><br><span class=\"line\">        </span><br><span class=\"line\">    return y</span><br></pre></td></tr></table></figure><p>因为在这个变化中我们只变动了<code>z</code>和<code>y</code>的位置，他们两个所代表的子树高度发生了改变，所以只需要将这两个节点的<code>height</code>属性进行一下维护。<strong>注意一下这里的顺序问题：要先维护<code>z</code>的高度，再去维护<code>y</code>的高度。</strong>在旋转之后，<code>z</code>变成了<code>y</code>的子节点，而我们在获取高度的时候实际上是直接调用这个属性的，如果我们先维护了<code>y</code>的高度，而没有去更新<code>z</code>的高度变化，那么得到的结果将会是出现错误。</p>\n<p><img src=\"https://post-pic.nos-eastchina1.126.net/Data%20Structure%20and%20Algorithm/rightRotate.PNG\" class=\"φcy\" alt=\"rightRotate\"></p>\n<p>与左旋转相类似，右旋转也是将<code>pivot</code>的一个子树转移给原来的<code>root</code>，并将就得根节点作为<code>pivot</code>的一个子节点，再返回<code>pivot</code>作为新的根节点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rightRotate</span><span class=\"params\">(self, z)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" Implement right rotate operation on subtree z \"\"\"</span></span><br><span class=\"line\">    y = z.left</span><br><span class=\"line\">    T3 = y.right</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># Perform rotation</span></span><br><span class=\"line\">    y.right = z</span><br><span class=\"line\">    z.left = T3</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># Update height</span></span><br><span class=\"line\">    z.height = <span class=\"number\">1</span> + max(self.getHeight(z.left), self.getHeight(z.right))</span><br><span class=\"line\">    y.height = <span class=\"number\">1</span> + max(self.getHeight(y.left), self.getHeight(y.right))</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> y</span><br></pre></td></tr></table></figure><h2 id=\"旋转的不同情况\">旋转的不同情况<a href=\"#旋转的不同情况\" title=\"旋转的不同情况\"></a></h2><h3 id=\"left-left-and-right-right-case\">Left-left and Right-right case<a href=\"#left-left-and-right-right-case\" title=\"Left-left and Right-right case\"></a></h3><p>这两种情况就如之前解释树的旋转操作时候所示，我们所考察的节点<code>z</code>、<code>y</code>、<code>x</code>全部分布在一侧。直接对不平衡节点进行一次left rotation或者right rotation即可。</p>\n<h3 id=\"left-right-case\">Left-right case<a href=\"#left-right-case\" title=\"Left-right case\"></a></h3><p>在该情况下，插入节点到第一个不平衡点的路径是有拐点的不能像上面两种情况通过一次树旋转来平衡。首先以节点<code>y</code>为根节点、节点<code>x</code>为轴，对这个子树进行左旋转使其变成所需节点全在一侧。然后以节点<code>z</code>为根节点再进行一次右旋转即可。</p>\n<p><img src=\"https://post-pic.nos-eastchina1.126.net/Data%20Structure%20and%20Algorithm/leftRight.PNG\" class=\"φcy\" alt=\"leftRight-case\"></p>\n<h3 id=\"right-left-case\">Right-left case<a href=\"#right-left-case\" title=\"Right-left case\"></a></h3><p>与上面的Left-right Case一样，进行两次旋转操作即可。</p>\n<p><img src=\"https://post-pic.nos-eastchina1.126.net/Data%20Structure%20and%20Algorithm/rightLeft.PNG\" class=\"φcy\" alt=\"rightLeft-case\"></p>\n<h1 id=\"avl-tree的基本操作\">AVL Tree的基本操作<a href=\"#avl-tree的基本操作\" title=\"AVL Tree的基本操作\"></a></h1><p>基于上面的分析，和之前一篇关于BST的Post，在这里简单梳理一下AVL Tree的三个基本操作的实现：<strong>插入、删减、搜索</strong>。搜索和BST基本一样就不在这里赘述了，基于比较大小决定查找方向的规则。变得麻烦的是插入和删减，因为要在这个过程中始终保持树的平衡。</p>\n<h2 id=\"节点插入\">节点插入<a href=\"#节点插入\" title=\"节点插入\"></a></h2><p>依然是一个递归的实现，需要注意的是判断当前子树形态的条件。GeeksforGeeks博客中的实现是判断插入值和<code>root</code>的某个子节点值的大小关系来判断。但很多时候会出现根节点只有一侧有子节点的情况，这样就会报错。所以我们在生成AVL Tree的时候使用<code>root</code>子节点的平衡因子来判断。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, root, val)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># Perform common BST insertion</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__Node(val)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> val &lt; root.val:</span><br><span class=\"line\">        root.left = self.insert(root.left, val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        root.right = self.insert(root.right, val)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># Update Height</span></span><br><span class=\"line\">    root.height = <span class=\"number\">1</span> + max(self.getHeight(root.left), self.getHeight(root.right))</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># Get the balance factor and rebalance the tree</span></span><br><span class=\"line\">    balance = self.getBalance(root)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># Left-left case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> balance &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> self.getBalance(root.left) &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.rightRotate(root)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># Right-right case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> balance &lt; <span class=\"number\">-1</span> <span class=\"keyword\">and</span> self.getBalance(root.right) &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.leftRotate(root)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Left-right case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> balance &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> self.getBalance(root.right) &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        root.left = self.leftRotate(root.left)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.rightRotate(root)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># Right-left case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> balance &lt; <span class=\"number\">-1</span> <span class=\"keyword\">and</span> self.getBalance(root.left) &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        root.right = self.rightRotate(root.right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.leftRotate(root)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure><h2 id=\"节点删除\">节点删除<a href=\"#节点删除\" title=\"节点删除\"></a></h2><p>先来回顾一下普通的BST是如何删除节点的：</p>\n<blockquote>\n<ol><li><p>如果该节点没有子节点，直接删除</p>\n</li>\n<li><p>如果该节点有一个子节点，用该子节点替换被删除的节点</p>\n</li>\n<li><p>如果该节点有两个子节点，在其子树中寻找其在in-order排序下的前一个或后一个元素，进行替换并将找到的这个节点删除</p>\n</li>\n</ol></blockquote>\n<p>寻找节点的successor或者predecessor可以这样：<strong>在左子树中获取最大值，或者在右子树中获取最小值</strong>。一开始我们使用一般的BST逻辑进行节点删除。在这个实现中，如果找到需要删除的节点，在任意子节点缺失的情况下都可以直接返回另一子节点：具体的就是将<code>root</code>指向这一子节点。如果左右都存在子节点，就找它的predecessor来替代，并将predecessor删除（这个predecessor一般是叶节点，没有任何子节点，按照递归会直接返回<code>None</code>，不需要维护节点的<code>height</code>属性）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(self, root, val)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> val &lt; root.val:</span><br><span class=\"line\">        root.left = self.delete(root.left, val)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> val &gt; root.val:</span><br><span class=\"line\">        root.right = self.delete(root.right, val)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root.left:</span><br><span class=\"line\">            root = root.right</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> root.right:</span><br><span class=\"line\">            root = root.left</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            predc = root.left</span><br><span class=\"line\">            <span class=\"keyword\">while</span> predc.right:</span><br><span class=\"line\">                predc = predc.right</span><br><span class=\"line\">            root.val = predc.val</span><br><span class=\"line\">            root.left = self.delete(root.left, predc.val)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># If the tree has only one node, no need to check height</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> root <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Update height of node</span></span><br><span class=\"line\">    root.height = <span class=\"number\">1</span> + max(self.getHeight(root.left), self.getHeight(root.right))</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># Get balance factor</span></span><br><span class=\"line\">    balance = self.getBalance(root)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Left-left case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> balance &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> self.getBalance(root.left) &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.rightRotate(root)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># Right-right case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> balance &lt; <span class=\"number\">-1</span> <span class=\"keyword\">and</span> self.getBalance(root.right) &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.leftRotate(root)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># Left-right case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> balance &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> self.getBalance(root.right) &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        root.left = self.leftRotate(root.left)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.rightRotate(root)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># Right-left case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> balance &lt; <span class=\"number\">-1</span> <span class=\"keyword\">and</span> self.getBalance(root.left) &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        root.right = self.rightRotate(root.right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.leftRotate(root)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure><h1 id=\"reference\">Reference<a href=\"#reference\" title=\"Reference\"></a></h1><ul><li><a href=\"[https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91](https://baike.baidu.com/item/平衡二叉树)\">Baike - 平衡二叉树</a></li>\n<li><a href=\"[https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91](https://zh.wikipedia.org/wiki/平衡树)\">Wiki - 平衡树</a></li>\n<li><a href=\"https://www.jianshu.com/p/728b37a5499c\" target=\"_blank\">简书 - AVL Tree的Java实现</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/avl-tree-set-1-insertion/\" target=\"_blank\">GeeksforGeeks - AVL Tree</a></li>\n</ul>","prev":{"title":"机器学习模型——支持向量机（1）","link":"post/支持向量机（1）"},"next":{"title":"Binary Search Tree","link":"post/Binary_Search_Tree"},"plink":"https://magi003769.github.io/post/平衡二叉树/","toc":[{"id":"avl-tree","title":"AVL Tree","index":"1"},{"id":"平衡因子","title":"平衡因子","index":"2"},{"id":"树的旋转","title":"树的旋转","index":"3","children":[{"id":"旋转操作","title":"旋转操作","index":"3.1"},{"id":"旋转的不同情况","title":"旋转的不同情况","index":"3.2","children":[{"id":"left-left-and-right-right-case","title":"Left-left and Right-right case","index":"3.2.1"},{"id":"left-right-case","title":"Left-right case","index":"3.2.2"},{"id":"right-left-case","title":"Right-left case","index":"3.2.3"}]}]},{"id":"avl-tree的基本操作","title":"AVL Tree的基本操作","index":"4","children":[{"id":"节点插入","title":"节点插入","index":"4.1"},{"id":"节点删除","title":"节点删除","index":"4.2"}]},{"id":"reference","title":"Reference","index":"5"}]}