{"title":"C++入门到放弃——指针和引用","date":"2018-03-08T03:55:30.000Z","date_formatted":{"ll":"Mar 7, 2018","L":"03/07/2018","MM-DD":"03-07"},"link":"post/指针和引用","tags":["C++Prime","Pointer","Reference"],"categories":["C-C++"],"updated":"2019-05-04T04:33:06.000Z","content":"<h1 id=\"引用（reference）\">引用（Reference）<a href=\"#引用（reference）\" title=\"引用（Reference）\"></a></h1><blockquote>\n<p>A reference defines an alternative name for an object</p>\n</blockquote>\n<p>引用实际上并不是一个对象，它只是给已有的变量赋予了另外一个名字。当我们初始化一个变量时，我们会将initializer的值复制给这个我们正在创造的对象。而当我们初始化一个引用的时候，我们是将其initializer的引用和我们正在生成的引用绑定在一起。一旦引用被初始化，它就被限制在这个初始对象上，不能再将其与另外对象的引用重新绑定。所以，引用是必须被初始化的，而不能只是简单的“声明”。</p>\n<a id=\"more\"></a><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> iVal = <span class=\"number\">1024</span>;         <span class=\"comment\">// define an int object named by iVal</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;refVal = iVal;      <span class=\"comment\">// define a reference bound with reference of iVal</span></span><br><span class=\"line\"></span><br><span class=\"line\">refVal = <span class=\"number\">2</span>;              <span class=\"comment\">// assigns 2 to the object that refVal refVal refers to</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ii = refVal;         <span class=\"comment\">// the same as ii = iVal</span></span><br></pre></td></tr></table></figure><p>只有对象才有引用，而引用本身并不是一个对象，所以我们不能定义一个引用的引用。另外当我们用右值（比如一个具体数字）对引用进行初始化时，会出现错误。而当在命令之前加上<code>const</code>之后，就是可以通过编译了。但具体为什么，和这个命令的实际意义，在后面的学习再做探讨。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> &amp;a = <span class=\"number\">10</span>;           <span class=\"comment\">// illegal, error occurs</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;b = <span class=\"number\">11</span>;     <span class=\"comment\">// legal, BUT, what's the meaning???</span></span><br></pre></td></tr></table></figure><h1 id=\"指针（pointer）\">指针（Pointer）<a href=\"#指针（pointer）\" title=\"指针（Pointer）\"></a></h1><p>指针也是一种<code>compound type</code>， 它和引用一样也用于间接使用其他对象。但和引用不同的是指针是一个对象，它可以被赋值、赋值；且一个至真可以在lifetime结束之前可以指向多个不同的对象。指针在定义是不一定要初始化，在需要它指向一些对象时使用即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> ival = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = &amp;ival;      <span class=\"comment\">// p holds the address of ival; p is a pointer to ival</span></span><br></pre></td></tr></table></figure><p>在 <code>p</code> 定义为指向 <code>ival</code> 的指针后，<code>p</code> 实际上存储的是<code>ival</code> 的地址。当我们试图输出<code>p</code> 时，我们会看到一串16进制数，那就是 <code>ival</code> 的地址。只有在输出 <code>*p</code> 时我们才会看到 <code>ival</code> 在对应内存为之中所存储的数值。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> dval;</span><br><span class=\"line\"><span class=\"keyword\">double</span> *pd = dval;   <span class=\"comment\">// illegal: initializer is an int object rather than address</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> *pd = &amp;dval;  <span class=\"comment\">// valid: initializer is the address of a double</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> *pd2 = pd;    <span class=\"comment\">// valis: initializer is a pointer as well</span></span><br></pre></td></tr></table></figure><p><strong>指针的值</strong>：</p>\n<p>存储在指针中的值可以是一下四种情况中的一种</p>\n<ol><li>指向一个对象</li>\n<li>指向刚好过一个对象结尾处的位置 （WTF？？？）</li>\n<li>可以是一个空指针 <code>null pointer</code></li>\n<li>也可以是invalid，不是上述三类中的</li>\n</ol><p>第二类我实在是有点懵逼啊…</p>\n<h1 id=\"两个运算符：amp-and-\">两个运算符：<code>&amp;</code> and <code>*</code><a href=\"#两个运算符：amp-and-\" title=\"两个运算符：&amp; and *\"></a></h1><blockquote>\n<p><code>&amp;</code>:  <strong>address-of operator</strong>. Yields the address of the object which it is applied.</p>\n<p><code>*</code>: <strong>Dereference operator</strong>. Dereference a pointer returns the object to which the pointer points. Assigning to the result of dereference assigns a new value to the underlying object.</p>\n</blockquote>\n<p><code>&amp;</code> 除了有bitwise AND这样的逻辑运算意义之外，一个重要的作用就是获取变量的地址。它可以用在各种不同类请的变量上，只要变量是一个已经定义的对象。指针也是一个对象，也有地址。因此 <code>&amp;</code> 也可以用在指针变量上。而 <code>&amp;</code> 却只能应用于指针上。指针存储的是一个地址，而其他类型的变量对应的内存位置存储的是一个数值。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;A = a;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *ptrA = &amp;A, *ptra = &amp;a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Address of a: \"</span> &lt;&lt; &amp;a &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Address of A: \"</span> &lt;&lt; &amp;A &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span> &lt;&lt; <span class=\"string\">\"Pointer ptrA\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Address of ptrA: \"</span> &lt;&lt; &amp;ptrA &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Stored value of ptrA: \"</span> &lt;&lt; ptrA &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The value of object pointed by ptrA: \"</span> &lt;&lt; *ptrA &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span> &lt;&lt; <span class=\"string\">\"Pointer ptra\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Address of ptra: \"</span> &lt;&lt; &amp;ptra &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Stored value of ptra: \"</span> &lt;&lt; ptra &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The value of object pointed by ptra: \"</span> &lt;&lt; *ptra &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure><p>下面是上面代码片段的输出。<code>ptrA</code> 和 <code>ptra</code> 作为两个指针有着自己不同的内存地址，在这两个内存位置又分别存储了 <code>A</code> 和 <code>a</code> 的地址。而作为同一对象的两个引用，<code>A</code> 和 <code>a</code> 有着同样的内存地址。所以两个指针实际上是指向的是同一个对象，存储完全相同的内存地址，<code>*</code> 运算符dereference之后得到的值也就是一样的了。</p>\n<p><img src=\"http://post-pic.nos-eastchina1.126.net/LeetCode/%E6%8D%95%E8%8E%B7.PNG\" class=\"φcy\" alt=\"console\"></p>\n","prev":{"title":"C++ vector","link":"post/cpp-vector"},"next":{"title":"机器学习模型——感知机","link":"post/感知机"},"plink":"https://magi003769.github.io/post/指针和引用/","toc":[{"id":"引用（reference）","title":"引用（Reference）","index":"1"},{"id":"指针（pointer）","title":"指针（Pointer）","index":"2"},{"id":"两个运算符：amp-and-","title":"两个运算符：&amp; and *","index":"3"}]}