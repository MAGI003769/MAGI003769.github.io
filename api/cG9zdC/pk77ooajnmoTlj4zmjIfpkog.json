{"title":"链表的双指针","date":"2019-05-05T07:00:00.000Z","date_formatted":{"ll":"May 5, 2019","L":"05/05/2019","MM-DD":"05-05"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/header_imgs/karsten-gohm-1556287-unsplash.jpg","link":"post/链表的双指针","tags":["LeetCode","Linked List"],"categories":["算法数据结构"],"updated":"2020-05-10T22:56:00.000Z","content":"<p>链表存在的一个最大的问题就是不支持下标索引，且只能通过遍历获取整个链表的长度。这样，在<code>array</code>中经常使用的双指针法看上去似乎很难有用武之地。但实际上，链表中也有它独特的双指针使用方法。</p>\n<a id=\"more\"></a><h1 id=\"slow-and-fast\">Slow and Fast<a href=\"#slow-and-fast\" title=\"Slow and Fast\"></a></h1><p>相比<code>array</code>中双指针可以通过改变下标实现任意元素的访问，链表中的指针是不可能实现这样的效果的。因此，链表中的双指针有比较特殊的用法：<strong>使用两个移动速度不同的指针，<code>slow</code>和<code>fast</code>，来实现一些有趣的解决方法</strong>。在每一次迭代中，<code>fast</code>指针都会多移动一步。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Initialize slow &amp; fast pointers</span></span><br><span class=\"line\">ListNode slow = head;</span><br><span class=\"line\">ListNode fast = head;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Change this condition to fit specific problem.</span></span><br><span class=\"line\"><span class=\"comment\"> * Attention: remember to avoid null-pointer error</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (slow != <span class=\"keyword\">null</span> &amp;&amp; fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    slow = slow.next;           <span class=\"comment\">// move slow pointer one step each time</span></span><br><span class=\"line\">    fast = fast.next.next;      <span class=\"comment\">// move fast pointer two steps each time</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slow == fast) &#123;         <span class=\"comment\">// change this condition to fit specific problem</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;   <span class=\"comment\">// change return value to fit specific problem</span></span><br></pre></td></tr></table></figure><h2 id=\"linked-list-cycle\">Linked List Cycle<a href=\"#linked-list-cycle\" title=\"Linked List Cycle\"></a></h2><p><a href=\"https://leetcode.com/problems/linked-list-cycle/\" target=\"_blank\">141. Linked List Cycle</a>要求判断链表里面优美与出现循环的情况。使用双指针的话就很巧妙的解决了这个问题。如果没有cycle，那么<code>fast</code>将会最先到达链表的尾端这时即可返回<code>false</code>；而如果是有循环的情况，<code>fast</code>将会逐渐逼近<code>slow</code>，有点类似赛跑时的“套圈”。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hasCycle</span><span class=\"params\">(self, head)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type head: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> head == <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        slow = head</span><br><span class=\"line\">        fast = head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            slow = slow.next</span><br><span class=\"line\">            fast = fast.next</span><br><span class=\"line\">            <span class=\"keyword\">if</span> fast != <span class=\"literal\">None</span> <span class=\"keyword\">and</span> fast.next != <span class=\"literal\">None</span>:</span><br><span class=\"line\">                fast = fast.next</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> slow == fast:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure><p><a href=\"https://leetcode.com/problems/linked-list-cycle-ii/\" target=\"_blank\">142. Linked List Cycle II</a>是之前这道题的升级版，不仅是要判断有误循环，还要找到形成cycle的那个节点，记为<code>E</code>。从下面的代码中可以看出，我们还是利用快慢两个指针得到他们相遇的节点，记为<code>M</code>。那么如果设链表的起点为<code>H</code>、cycle的长度为<code>C</code>。</p>\n<ul><li><code>H</code>到<code>E</code>的距离为<code>L1</code></li>\n<li><code>E</code>到<code>M</code>的距离为<code>L2</code></li>\n<li>沿链表方向<code>M</code>到<code>E</code>距离为<code>C - L2</code></li>\n<li><code>slow</code>走过的长度为<code>L1+L2</code></li>\n<li><code>fast</code>走过的长度为<code>l1+L2+n*C</code></li>\n</ul><p>由上面的关系我们可以得出两个指针经过的路径长度是二倍关系，所以就能得出：<code>L1 = (n-1)*C + (C - L2)</code>。这说明（可能经过几个cycle之后又回到<code>M</code>）相遇点<code>M</code>到<code>E</code>的距离与起点<code>H</code>到<code>E</code>的距离是相等的。我们可以复用<code>slow</code>，并令指针<code>head</code>同步向前，两者最终会在<code>E</code>相遇。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectCycle</span><span class=\"params\">(self, head)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type head: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        slow = fast = head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> fast <span class=\"keyword\">and</span> fast.next:</span><br><span class=\"line\">            slow = slow.next</span><br><span class=\"line\">            fast = fast.next.next</span><br><span class=\"line\">            <span class=\"keyword\">if</span> slow == fast:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> head != slow:</span><br><span class=\"line\">            slow = slow.next</span><br><span class=\"line\">            head = head.next</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head</span><br></pre></td></tr></table></figure><h2 id=\"palindrome-linked-list\">Palindrome Linked List<a href=\"#palindrome-linked-list\" title=\"Palindrome Linked List\"></a></h2><p><a href=\"https://leetcode.com/problems/palindrome-linked-list/\" target=\"_blank\">234. Palindrome Linked List</a>也是链表的一个经典问题，如果我们能直接获取链表的长度和利用下标索引访问元素（就像array一样），那这个问题其实是很好办的。然而链表蛋疼之处就在于这两个都不行。而链表双指针却恰好可以通过这个二倍的速度，来帮助获取链表的“中点”。我们需要比较注意的是在实现<code>fast</code>步长为2时的条件。我们需要<code>fast.next.next</code>去迭代这个指针，所以要保证<code>fast.next</code>也不是空。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(self, head)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type head: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># Get slow pointer to the middle of list</span></span><br><span class=\"line\">        fast, slow = head, head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> fast <span class=\"keyword\">and</span> fast.next: <span class=\"comment\"># this condition!</span></span><br><span class=\"line\">            fast = fast.next.next</span><br><span class=\"line\">            slow = slow.next</span><br><span class=\"line\">        <span class=\"comment\"># reverse second half of list</span></span><br><span class=\"line\">        new_head = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> slow:</span><br><span class=\"line\">            cur = slow</span><br><span class=\"line\">            slow = slow.next</span><br><span class=\"line\">            cur.next = new_head</span><br><span class=\"line\">            new_head = cur</span><br><span class=\"line\">        <span class=\"comment\"># check</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> new_head:</span><br><span class=\"line\">            print(new_head.val, head.val)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> new_head.val != head.val:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            head = head.next</span><br><span class=\"line\">            new_head = new_head.next</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure><h1 id=\"fast-goes-first\">Fast Goes First<a href=\"#fast-goes-first\" title=\"Fast Goes First\"></a></h1><p>这一类的双指针方法就如其名：<strong>先迭代指针<code>fast</code>，再开始同时迭代两个指针。</strong>这样，在后续的迭代中两个指针就会保持一个固定的距离，两个指针也就覆盖了链表中的一个确定的范围。链表相关的题目中如果涉及到倒数第N各元素或者需要指定一部分链表进行操作时，就可以利用这种类型的双指针来解题目。</p>\n<h2 id=\"remove-nth-node-from-end-of-list\">Remove Nth Node from End of List<a href=\"#remove-nth-node-from-end-of-list\" title=\"Remove Nth Node from End of List\"></a></h2><p>解决<a href=\"https://leetcode.com/problems/remove-nth-node-from-end-of-list\" target=\"_blank\">19. Remove Nth Node From End of List</a>就可以这样，让<code>fast</code>领先于<code>slow</code>指针N个节点，这样两个指针就合计覆盖了长度为<code>N+1</code>的链表范围。到此开始同步移动两个指针直到<code>fast</code>到达链表尾端。此时<code>slow</code>指向的就是链表的倒数第<code>N+1</code>个节点，将其<code>next</code>的指向修改即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(self, head: ListNode, n: int)</span> -&gt; ListNode:</span></span><br><span class=\"line\">        dummy = ListNode(<span class=\"string\">'#'</span>)</span><br><span class=\"line\">        dummy.next = head</span><br><span class=\"line\">        fast = slow = dummy</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            fast = fast.next</span><br><span class=\"line\">        <span class=\"keyword\">while</span> fast.next:</span><br><span class=\"line\">            fast = fast.next</span><br><span class=\"line\">            slow = slow.next</span><br><span class=\"line\">        slow.next = slow.next.next</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy.next</span><br></pre></td></tr></table></figure><h2 id=\"rotate-list\">Rotate List<a href=\"#rotate-list\" title=\"Rotate List\"></a></h2><p>我已开始做这道题的思路，是用一个<code>queue</code>存一系列链表的节点。这个<code>queue</code>的长度固定为<code>N+1</code>。虽然这道题目也过了，但是内存占用实在是太大了。后来考虑了一下，其实我需要的只有这个<code>queue</code>里的第一以及最后一个元素，所以不如使用双指针。从下面实现的代码中可以看出，除去前面吧<code>k</code>取模数的步骤之外，剩下的就几乎和上一道去除倒数第N个节点的题目一样。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rotateRight</span><span class=\"params\">(self, head, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type head: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> head <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> head.next:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head</span><br><span class=\"line\">        size = <span class=\"number\">0</span></span><br><span class=\"line\">        count = head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> count:</span><br><span class=\"line\">            size += <span class=\"number\">1</span></span><br><span class=\"line\">            count = count.next</span><br><span class=\"line\">        k = k % size</span><br><span class=\"line\">        <span class=\"keyword\">if</span> k == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head</span><br><span class=\"line\">        slow = fast = head</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">            fast = fast.next</span><br><span class=\"line\">        <span class=\"keyword\">while</span> fast.next:</span><br><span class=\"line\">            slow = slow.next</span><br><span class=\"line\">            fast = fast.next</span><br><span class=\"line\">        ans = slow.next</span><br><span class=\"line\">        slow.next = <span class=\"literal\">None</span></span><br><span class=\"line\">        fast.next = head</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure><h1 id=\"what-the-hell-\">What the Hell !?<a href=\"#what-the-hell-\" title=\"What the Hell !?\"></a></h1><p>又是如标题所述，这个部分记录的就是一些非常巧妙的解法。看见的时候，第一反应都是：WTF？？？还有这种操作？？？这部分的题目可能以后还会再更新。</p>\n<h2 id=\"intersection-of-two-linked-list\">Intersection of Two Linked List<a href=\"#intersection-of-two-linked-list\" title=\"Intersection of Two Linked List\"></a></h2><p><img src=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png\" class=\"φcy\" alt=\"intersect-linked\"></p>\n<p>这道题就是对两个<code>head</code>表示的两个链表各自使用一个指针，当迭代到链表末端的时候，就回到另一个起始点继续开始遍历。由此，当两个指针再次到达末尾的时候，走过的步数是两个链表的长度之和。也就是说，他们会同时再次到达尾部。由上面的图我们可以得知，交点之后的链表实际上是完全一样的，逆推一下的话我们可以得出这样的结论：<strong>两个指针会同时抵达交点</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getIntersectionNode</span><span class=\"params\">(self, headA, headB)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type head1, head1: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curA, curB = headA, headB</span><br><span class=\"line\">        <span class=\"keyword\">while</span> curA <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> curB:</span><br><span class=\"line\">            curA = curA.next <span class=\"keyword\">if</span> curA <span class=\"keyword\">else</span> headB</span><br><span class=\"line\">            curB = curB.next <span class=\"keyword\">if</span> curB <span class=\"keyword\">else</span> headA</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curA</span><br></pre></td></tr></table></figure><h1 id=\"reference\">Reference<a href=\"#reference\" title=\"Reference\"></a></h1><ul><li><a href=\"https://leetcode.com/explore/learn/card/linked-list/214/two-pointer-technique/1214/discuss/44781/Concise-O(n)-solution-by-using-C++-with-Detailed-Alogrithm-Description\" target=\"_blank\">How to solve Linked List Cycle 2</a></li>\n<li><a href=\"https://leetcode.com/explore/learn/card/linked-list/214/two-pointer-technique/1216/\" target=\"_blank\">LeetCode - Two-pointer technique</a></li>\n</ul>","prev":{"title":"Binary Search Tree","link":"post/Binary_Search_Tree"},"next":{"title":"Linked List","link":"post/linked-list"},"plink":"https://magi003769.github.io/post/链表的双指针/","toc":[{"id":"slow-and-fast","title":"Slow and Fast","index":"1","children":[{"id":"linked-list-cycle","title":"Linked List Cycle","index":"1.1"},{"id":"palindrome-linked-list","title":"Palindrome Linked List","index":"1.2"}]},{"id":"fast-goes-first","title":"Fast Goes First","index":"2","children":[{"id":"remove-nth-node-from-end-of-list","title":"Remove Nth Node from End of List","index":"2.1"},{"id":"rotate-list","title":"Rotate List","index":"2.2"}]},{"id":"what-the-hell-","title":"What the Hell !?","index":"3","children":[{"id":"intersection-of-two-linked-list","title":"Intersection of Two Linked List","index":"3.1"}]},{"id":"reference","title":"Reference","index":"4"}]}