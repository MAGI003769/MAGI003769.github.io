{"title":"Java的嵌套类和内部类","date":"2019-08-03T07:00:00.000Z","date_formatted":{"ll":"Aug 3, 2019","L":"08/03/2019","MM-DD":"08-03"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/header_imgs/about-4.jpg","link":"post/嵌套类和内部类","tags":["Java","嵌套类"],"categories":["Java"],"updated":"2020-05-22T18:56:05.571Z","content":"<p>讨论一下嵌套类和内部类的概念。这两个东西有区别，但联系非常紧密，有的时候面试可能会作为基础知识问到。</p>\n<a id=\"more\"></a><h1 id=\"概念区分\">概念区分<a href=\"#概念区分\" title=\"概念区分\"></a></h1><blockquote>\n<p><strong>Terminology:</strong> Nested classes are divided into two categories: static and non-static. Nested classes that are declared <code>static</code> are called <em>static nested classes</em>. Non-static nested classes are called <em>inner classes</em>.</p>\n</blockquote>\n<p>上面是Oracle Java文档给出的定义。<strong>嵌套类</strong>是一个统称，代指所有定义在其他类里面的类。而嵌套类又分成两种：静态与非静态。有<code>static</code>修饰的类被称为静态嵌套类，而非静态的嵌套类则被称为<strong>内部类</strong>。</p>\n<h1 id=\"嵌套类的分类\">嵌套类的分类<a href=\"#嵌套类的分类\" title=\"嵌套类的分类\"></a></h1><p>如果细分的话，除了以上两类嵌套类，还可以再补充两种类型。这样总计是4中不同的嵌套类，分别是：</p>\n<ul><li>静态嵌套类</li>\n<li>非静态嵌套类</li>\n<li>局部类</li>\n<li>匿名类</li>\n</ul><h2 id=\"静态嵌套类\">静态嵌套类<a href=\"#静态嵌套类\" title=\"静态嵌套类\"></a></h2><p>这种嵌套类定义在其他类内部，有<code>static</code>关键字修饰。因此，他可以直接使用自身的构造器来创建实例，不依赖于外部类的实例。我们甚至可以将它看作是一个普通类，只不过恰好定义在其他类内部。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OuterClass.InnerClass obj = <span class=\"keyword\">new</span> OuterClass.InnerClass();</span><br></pre></td></tr></table></figure><p>也正是因为没有了这样的依赖关系，静态嵌套类不能访问外部类的成员变量或者方法。而在创建外部类实例的时候，静态嵌套类实际上是不会被创建出实例的。这样的静态嵌套类对于外部类来说，简直就和定义在外部没有什么区别。所以<strong>静态嵌套类内部是可以有静态成员</strong>。</p>\n<h2 id=\"非静态嵌套类\">非静态嵌套类<a href=\"#非静态嵌套类\" title=\"非静态嵌套类\"></a></h2><p>非静态嵌套类，也就是内部类，没有<code>static</code>修饰。它们可以访问外部类的成员，也就是说这样的内部类依赖于外部类。所以，对于非静态嵌套类，它与它的外部类之间有着非常强的联系。它的实例中实际上有一个隐含的引用指向它的外部类实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OuterClass</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = a;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.b = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        OuterClass calc = <span class=\"keyword\">new</span> OuterClass(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        OuterClass.Operator op = calc.<span class=\"keyword\">new</span> InnerClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>注意这里的实例构造语法，我们需要先创建一个外部类实例，再通过这个实例调用内部类的构造器来创建内部类的实例。这个内部类前面的<code>public</code>关键字，有没有其实并不影响可见性。</p>\n<h2 id=\"局部类\">局部类<a href=\"#局部类\" title=\"局部类\"></a></h2><p>前面两类嵌套类都是作为<strong>成员</strong>，生命在外部类的内部。而局部类则类似于局部变量，它被定义在<strong>外部类方法的内部</strong>。比如在使用<code>PriorityQueue</code>的时候，我们会根据需要制定排序规则。这时就会临时定义一个<code>Comparator</code>类。比如下面我们就可以通过定义一个新的<code>MyComparator</code>类来继承<code>Comparator</code>类，从而将优先队列默认的最小堆模式变成最大堆。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TryInnerClass</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o2 - o1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; nums = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            nums.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        PriorityQueue&lt;Integer&gt; minHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;();</span><br><span class=\"line\">        PriorityQueue&lt;Integer&gt; maxHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(<span class=\"keyword\">new</span> myComparator());</span><br><span class=\"line\"></span><br><span class=\"line\">        minHeap.addAll(nums);</span><br><span class=\"line\">        maxHeap.addAll(nums);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"minHeap: \"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Output: 0, 1, 2, 3, 4</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(minHeap.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.print(minHeap.poll() + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"\\nmaxHeap: \"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Output: 4, 3, 2, 1, 0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(maxHeap.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.print(maxHeap.poll() + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"匿名类\">匿名类<a href=\"#匿名类\" title=\"匿名类\"></a></h2><p>还是以上面的<code>Comparator</code>为例，还有一种方式来定义优先队列的比较规则，即使用匿名类。顾名思义，匿名类没有名字。我们可以看到，这样的类只有在使用时才会被定义并实例化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PriorityQueue&lt;Integer&gt; maxHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(<span class=\"keyword\">new</span> myComparator&lt;Integer&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o2 - o1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>匿名类常见用法：动态的常见函数对象（EffectiveJava，Item21），例如事件监听器；创建过程对象，比如Runnable、Thread或者TimerTask。还有就是静态工厂方法内部，ruturn new XXX();(EffectiveJava，Item18)</p>\n<h1 id=\"内部类的好处\">内部类的好处<a href=\"#内部类的好处\" title=\"内部类的好处\"></a></h1><ol><li>Java不允许多继承，但是可以在一个外部类中包含多个内部类，每个内部类实现一个继承。这样就相当于变相的实现了多继承。</li>\n<li>可以让开发者更好的控制类之间的可见性。</li>\n<li>方便编写多线程的代码。</li>\n<li>方便对接口进行自由的定义。</li>\n</ol><h1 id=\"summary\">Summary<a href=\"#summary\" title=\"Summary\"></a></h1><ul><li>静态嵌套类，不依赖于外部类，不能访问外部类的非静态成员</li>\n<li>非静态嵌套类（内部类），依赖于外部类的实例调用构造器进行初始化，可以访问</li>\n<li>局部类，类似局部变量，定义在外部类方法的内部</li>\n<li>匿名类，没有实际的名字，只在使用时定义和实例化</li>\n</ul><h1 id=\"reference\">Reference<a href=\"#reference\" title=\"Reference\"></a></h1><ul><li><p><a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html\" target=\"_blank\">Java Tutorial - Access Control</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/45241466\" target=\"_blank\">Java中的嵌套类</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/b7f9c806b3aa\" target=\"_blank\">wangcanfeng - Java嵌套类</a></p>\n</li>\n</ul>","prev":{"title":"MAC上配置Hexo部署GitHub Page","link":"post/MAC-hexo"},"next":{"title":"Java面向对象","link":"post/接口和抽象类"},"plink":"https://magi003769.github.io/post/嵌套类和内部类/","toc":[{"id":"概念区分","title":"概念区分","index":"1"},{"id":"嵌套类的分类","title":"嵌套类的分类","index":"2","children":[{"id":"静态嵌套类","title":"静态嵌套类","index":"2.1"},{"id":"非静态嵌套类","title":"非静态嵌套类","index":"2.2"},{"id":"局部类","title":"局部类","index":"2.3"},{"id":"匿名类","title":"匿名类","index":"2.4"}]},{"id":"内部类的好处","title":"内部类的好处","index":"3"},{"id":"summary","title":"Summary","index":"4"},{"id":"reference","title":"Reference","index":"5"}]}