{"title":"C++ vector","date":"2018-03-16T02:55:30.000Z","date_formatted":{"ll":"Mar 15, 2018","L":"03/15/2018","MM-DD":"03-15"},"link":"post/cpp-vector","tags":["C++","LeetCode"],"categories":["C-C++"],"updated":"2019-05-04T04:27:40.000Z","content":"<p><code>st::vector</code> is a common container in C++. Unlike C-style array with a fixed size that needs definition in advance, it provides a dynamic size and much more convenient methods to access the items in vector. Additionally, <code>st::vector</code> has a tool called <code>iterator</code> which is quite useful when implementation some algorithms such as various kinds of sort schemes. With the help of iterator, we can get rid of the C-style coding that uses indices. </p>\n<a id=\"more\"></a><h1 id=\"constructor\">Constructor<a href=\"#constructor\" title=\"Constructor\"></a></h1><p>When creating a vector, we need firstly specify the data type of its item, a built-in type or user-define class. The argument of vector constructor can be: <strong>(1) size of vector, (2) iterator of another existent vector</strong>. Following block contains different types of constructor. We can see that the creation of vector <code>nums</code> is  a special case origins from a C-style array <code>myints</code>. The parameter passed into constructor are actually treated as two iterators although they refers to a C-style array object. </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; first;                                <span class=\"comment\">// empty vector of ints</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">second</span> <span class=\"params\">(<span class=\"number\">4</span>,<span class=\"number\">100</span>)</span></span>;                       <span class=\"comment\">// four ints with value 100</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">third</span> <span class=\"params\">(second.<span class=\"built_in\">begin</span>(),second.<span class=\"built_in\">end</span>())</span></span>;  <span class=\"comment\">// iterating through second</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">fourth</span> <span class=\"params\">(third)</span></span>;                       <span class=\"comment\">// a copy of third</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the iterator constructor can also be used to construct from arrays:</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> counts = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> myints[counts];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;counts; ++i) myints[i] = rand() % <span class=\"number\">100</span> + <span class=\"number\">1</span>;   <span class=\"comment\">// generate random numbers</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">nums</span><span class=\"params\">(myints, myints + <span class=\"keyword\">sizeof</span>(myints) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output the vector:</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Unsorted array:\\n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator i=nums.<span class=\"built_in\">begin</span>(); i!=nums.<span class=\"built_in\">end</span>(); ++i)</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; *i &lt;&lt; <span class=\"string\">' '</span>;</span><br></pre></td></tr></table></figure><h1 id=\"iterator\">Iterator<a href=\"#iterator\" title=\"Iterator\"></a></h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">10</span>; ++i) myvector.push_back(i);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a vector of &#123;1, 2, 3, 4, ..., 9, 10&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; *myvector.<span class=\"built_in\">begin</span>();      <span class=\"comment\">// exactly the first element 1</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; *myvector.<span class=\"built_in\">begin</span>() + <span class=\"number\">9</span>   <span class=\"comment\">// the last element 10</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; *myvector.<span class=\"built_in\">end</span>();        <span class=\"comment\">// output is 0</span></span><br></pre></td></tr></table></figure><h1 id=\"add-or-delete-elements-in-vector\">Add or delete elements in vector<a href=\"#add-or-delete-elements-in-vector\" title=\"Add or delete elements in vector\"></a></h1><p>For a simple case, <code>push_back</code> is a public member function of vector class to add element at the end while <code>pop_back</code> is the one to delete element at the end. In most cases, however, we need to do some operations on intermediate elements in vector. Thus methods <a href=\"http://www.cplusplus.com/reference/vector/vector/insert/\" target=\"_blank\"><code>insert</code></a> and <a href=\"http://www.cplusplus.com/reference/vector/vector/erase/\" target=\"_blank\"><code>erase</code></a> make it possible. </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">myvector</span><span class=\"params\">(<span class=\"number\">3</span>,<span class=\"number\">100</span>)</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it;</span><br><span class=\"line\"></span><br><span class=\"line\">it = myvector.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">it = myvector.insert ( it , <span class=\"number\">200</span> );   <span class=\"comment\">// add 200 at the beginning</span></span><br><span class=\"line\">                                     <span class=\"comment\">// function returns another iterator of the beginning</span></span><br><span class=\"line\">myvector.insert (it,<span class=\"number\">2</span>,<span class=\"number\">300</span>);          <span class=\"comment\">// add two 300 at beginning</span></span><br><span class=\"line\"></span><br><span class=\"line\">it = myvector.<span class=\"built_in\">begin</span>();               <span class=\"comment\">// \"it\" no longer valid as beginning, get a new one</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">anothervector</span><span class=\"params\">(<span class=\"number\">2</span>,<span class=\"number\">400</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// insert another vector: we MUST use the two iterators of the inserted vector</span></span><br><span class=\"line\"><span class=\"comment\">// the insert position is before the iterator of it+2 which refers to 200</span></span><br><span class=\"line\">myvector.insert (it+<span class=\"number\">2</span>,anothervector.<span class=\"built_in\">begin</span>(),anothervector.<span class=\"built_in\">end</span>()); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> myarray [] = &#123; <span class=\"number\">501</span>,<span class=\"number\">502</span>,<span class=\"number\">503</span> &#125;;</span><br><span class=\"line\">myvector.insert (myvector.<span class=\"built_in\">begin</span>(), myarray, myarray+<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// myvector contains: [501, 502, 503, 300, 300, 400, 400, 200, 100, 100, 100]</span></span><br></pre></td></tr></table></figure><p>My intuitive explanation is that the insertion happens at position <strong>“before”</strong> the iterator. It is just like the typing pattern when you are typing. For instance, after line 12 in block above, iterator refers to the beginning of vector which currently contains {300, 300, 200, 100, 100, 100}. Thus, in line 17, <code>it+2</code> refers to the third element, 200. The insertion of new elements occurs <strong>before</strong> 200 and vector now becomes {300, 300, 400, 400, 200, 100, 100}. </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; myvector;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// set some values (from 1 to 10)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">10</span>; i++) myvector.push_back(i);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// erase the 6th element</span></span><br><span class=\"line\">myvector.erase (myvector.<span class=\"built_in\">begin</span>()+<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// erase the first 3 elements:</span></span><br><span class=\"line\">myvector.erase (myvector.<span class=\"built_in\">begin</span>(),myvector.<span class=\"built_in\">begin</span>()+<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure><h1 id=\"reference\">Reference<a href=\"#reference\" title=\"Reference\"></a></h1><ol><li><a href=\"http://www.cplusplus.com/reference/vector/vector/\" target=\"_blank\">cplusplus.com: vector</a></li>\n<li><a href=\"https://stackoverflow.com/questions/10750057/how-to-print-out-the-contents-of-a-vector\" target=\"_blank\">How to print out the contents of a vector?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/5346890/what-is-the-difference-between-const-iterator-and-iterator\" target=\"_blank\">Difference between <code>const_iterator</code> and <code>iterator</code></a></li>\n<li><a href=\"https://www.uow.edu.au/~lukes/TEXTBOOK/notes-cpp/stl-containers/vector/iter-vector.html\" target=\"_blank\">STL: Iterators for vector</a></li>\n</ol>","prev":{"title":"Latex 代码高亮问题","link":"post/latex代码高亮"},"next":{"title":"C++入门到放弃——指针和引用","link":"post/指针和引用"},"plink":"https://magi003769.github.io/post/cpp-vector/","toc":[{"id":"constructor","title":"Constructor","index":"1"},{"id":"iterator","title":"Iterator","index":"2"},{"id":"add-or-delete-elements-in-vector","title":"Add or delete elements in vector","index":"3"},{"id":"reference","title":"Reference","index":"4"}]}