{"per_page":7,"total":8,"current":6,"data":[{"title":"Morphological Operation","date":"2018-05-20T07:00:00.000Z","date_formatted":{"ll":"May 20, 2018","L":"05/20/2018","MM-DD":"05-20"},"excerpt":"<p>Morphology (形态学) 大概是图像处理这门课最后一部分的内容了，最后一次作业包括了数硬币和车牌识别两个部分。虽然说形态学是图像处理的一个重要分支，但是总感觉这个方法并不是那么得高明，感觉像是一种 pixel level 的匹配，也谈不上什么特征不特征的。不过作为计算机视觉中的经典方法，也算是在早期起到了一定的作用。这一篇博客就简单的谈一下这方面的话题。</p>","link":"post/morphologic_operation","tags":["Image-processing","Morphological Operation"],"categories":["图像处理"]},{"title":"聊一聊物体检测的Metrics与Detection Theory","date":"2018-04-27T07:00:00.000Z","date_formatted":{"ll":"Apr 27, 2018","L":"04/27/2018","MM-DD":"04-27"},"excerpt":"<p>最近在做 FYP 的收尾工作了，需要将模型的精度用一个量化的形式去衡量。正巧 Data Communication 的课上也涉及到了检测的相关内容，于是就在这里做个整理，也帮马上就要写的论文整理一下思路。虽然我个人觉得有的时候只用这种精度来衡量模型的好坏并不能非常全面的衡量，但毕竟这些标准是有理论支持的、相对客观的。而且真正在工业实践中比较模型好坏时，肯定不能用人眼的主观感受去判断，人们更愿意用数据说话。</p>","link":"post/Detection Theory","tags":["Detection Theory","Object-Detection"],"categories":["目标检测"]},{"title":"DCT——离散余弦变换","date":"2018-04-20T07:00:00.000Z","date_formatted":{"ll":"Apr 20, 2018","L":"04/20/2018","MM-DD":"04-20"},"excerpt":"","link":"post/DCT","tags":["DCT","Image-processing"],"categories":["图像处理"]},{"title":"Linux命令行","date":"2018-04-02T07:00:00.000Z","date_formatted":{"ll":"Apr 2, 2018","L":"04/02/2018","MM-DD":"04-02"},"excerpt":"<p>这几天总算是搞定了实验室服务器的账户，终于用上TITAN了。摆脱了一天到晚读玄学paper不知所以，开始了一脸懵逼的玄学实验胡乱调参。而在这之前需要了解掌握基本的 Linux 命令行操作，熟悉终端，才能远程控制服务器。</p>","link":"post/linux命令行","tags":["Linux","remote server","terminal"],"categories":["学习笔记"]},{"title":"Latex 代码高亮问题","date":"2018-03-25T07:00:00.000Z","date_formatted":{"ll":"Mar 25, 2018","L":"03/25/2018","MM-DD":"03-25"},"excerpt":"<p>今天是这学期第一次写报告，好些个月没使 LaTex 竟然有些手生，又遇到了一些关于代码高亮的问题，于是就写了这个简短的 post 来记录一下问题和解决方法。作为一个理工科的学生，报告里面插代码是基本技能。基础的就是 <code>listings</code> 包的使用。</p>","link":"post/latex代码高亮","tags":["LaTex","Tricks"],"categories":["学习笔记"]},{"title":"C++ vector","date":"2018-03-16T02:55:30.000Z","date_formatted":{"ll":"Mar 15, 2018","L":"03/15/2018","MM-DD":"03-15"},"excerpt":"<p><code>st::vector</code> is a common container in C++. Unlike C-style array with a fixed size that needs definition in advance, it provides a dynamic size and much more convenient methods to access the items in vector. Additionally, <code>st::vector</code> has a tool called <code>iterator</code> which is quite useful when implementation some algorithms such as various kinds of sort schemes. With the help of iterator, we can get rid of the C-style coding that uses indices. </p>","link":"post/cpp-vector","tags":["C++","LeetCode"],"categories":["C-C++"]},{"title":"C++入门到放弃——指针和引用","date":"2018-03-08T03:55:30.000Z","date_formatted":{"ll":"Mar 7, 2018","L":"03/07/2018","MM-DD":"03-07"},"excerpt":"<h1 id=\"引用（reference）\">引用（Reference）<a href=\"#引用（reference）\" title=\"引用（Reference）\"></a></h1><blockquote>\n<p>A reference defines an alternative name for an object</p>\n</blockquote>\n<p>引用实际上并不是一个对象，它只是给已有的变量赋予了另外一个名字。当我们初始化一个变量时，我们会将initializer的值复制给这个我们正在创造的对象。而当我们初始化一个引用的时候，我们是将其initializer的引用和我们正在生成的引用绑定在一起。一旦引用被初始化，它就被限制在这个初始对象上，不能再将其与另外对象的引用重新绑定。所以，引用是必须被初始化的，而不能只是简单的“声明”。</p>","link":"post/指针和引用","tags":["C++Prime","Pointer","Reference"],"categories":["C-C++"]}]}