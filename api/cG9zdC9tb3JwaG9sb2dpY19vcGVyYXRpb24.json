{"title":"Morphological Operation","date":"2018-05-20T07:00:00.000Z","date_formatted":{"ll":"May 20, 2018","L":"05/20/2018","MM-DD":"05-20"},"link":"post/morphologic_operation","tags":["Image-processing","Morphological Operation"],"categories":["图像处理"],"updated":"2019-05-04T04:20:58.000Z","content":"<p>Morphology (形态学) 大概是图像处理这门课最后一部分的内容了，最后一次作业包括了数硬币和车牌识别两个部分。虽然说形态学是图像处理的一个重要分支，但是总感觉这个方法并不是那么得高明，感觉像是一种 pixel level 的匹配，也谈不上什么特征不特征的。不过作为计算机视觉中的经典方法，也算是在早期起到了一定的作用。这一篇博客就简单的谈一下这方面的话题。</p>\n<a id=\"more\"></a><h1 id=\"morphological-operation\">Morphological Operation<a href=\"#morphological-operation\" title=\"Morphological Operation\"></a></h1><p>首先，形态学的各种操作都是基于 <strong>Binary image</strong> 的，这是应用这些方法的前提。在 Morphological Operation 中，一个重要的东西就是 <strong>Structure Element</strong>。数值上来讲，其内部均为1。如下图所示，structure element在输入图片上移动，与它所覆盖的区域对应做乘法，所得出的结果经过特定的逻辑运算的输出结果。</p>\n<p><img src=\"http://post-pic.nos-eastchina1.126.net/Image-Processing/morph21.jpg\" class=\"φcy\" alt=\"morph21\"></p>\n<p>根据逻辑运算的种类不同，morphological operation 也可以由许多不同的分类。最基本的就是 <strong>Erosion</strong> 和 <strong>Dilation</strong>。前者使用 Logical AND，而后者使用 Logical OR。这样就会导致非常直观的结果，如下图所示。Erosion 的与门操作使得能够输出数值的条件变得非常的苛刻，而 Dilation 的或门则使得输出数值相对容易。于是，原有的形状就被 “膨胀”，或者被 “侵蚀”。</p>\n<p><img src=\"http://post-pic.nos-eastchina1.126.net/Image-Processing/dil_ero.png\" class=\"φcy\" alt=\"dil_ero\"></p>\n<p>另外，需要注意的是，structure element 在原图形上是以其中心为基准的。中心在原图上对应一个像素点，并与之周边的像素做操作。因此在原图像边缘的位置，就需要做 padding 来保持输入输出图片尺寸的一致性。然而，貌似在 Matlab 的实现中，padding 的值默认为1，这就会在一定的情况下引出一些 bug，所以是一个比较值得注意的地方。</p>\n<h1 id=\"robustness\">Robustness<a href=\"#robustness\" title=\"Robustness\"></a></h1><p>Morphological operation 能够有效的条件实际上是比较苛刻的，我们需要被检测的 pattern 和被用作 structure element 的模板一模一样，甚至一个像素点都不能差，这样才能出现理想的检测结果。因此，morphological operation 的鲁棒性实际上是挺差的，那该只能用来检测类似印刷字或者工业产品这种有标准模板的东西。</p>\n<p>一个常规的办法就是将模板腐蚀掉一部分，这样不至于什么都检测不出来。但这样就会带来如下图的问题。‘K’ 和 ‘1’ 都将会检测出 ‘I’ 的结果。‘I’ 的模式确实也出现在 ‘K’ 和 ‘1’ 里面。</p>\n<p><img src=\"http://post-pic.nos-eastchina1.126.net/Image-Processing/ik1.png\" class=\"φcy\" alt=\"errors\"></p>\n<h1 id=\"hit-miss\">Hit-miss<a href=\"#hit-miss\" title=\"Hit-miss\"></a></h1><p>Hit-miss filter 是上面问题的一种解决方法。他通过检测字符本身，以及字符周边的背景轮廓来使得结果更加理想。下面的两张图是对这一方法的一个说明，白色表示需要检测的前景，黑色为背景。我们的任务是要检测左上角稍大的正方形区域，因此 structure element 就选取与之对应的形态。最终我们得到了如 <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"6.647ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 2861.9 1008.6\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">A\\ominus H</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-41\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2296\" d=\"M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM681 278Q669 385 591 463T381 542Q283 542 196 471T96 278V270H681V278ZM275 -42T388 -42T585 32T681 222V230H96V222Q108 107 191 33Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-48\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-41\" x=\"0\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-2296\" x=\"972\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-48\" x=\"1973\" y=\"0\"></use>\n</g>\n</svg> 的结果。下面矩形区域产生的结果并不是我们想要的。</p>\n<p><img src=\"http://post-pic.nos-eastchina1.126.net/Image-Processing/hitmiss_1.jpg\" class=\"φcy\" alt=\"hitmiss_1\"></p>\n<p>下面一步的操作就是，取原图像的全反 —— 前景变背景，背景变前景。相对应的，我们将上面的 structure element 取反并 padding 一些前景作为检测目标。这样就相当一是对背景轮廓的检测了。于是我们就得到了另一组结果 <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"8.507ex\" height=\"2.843ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -1006.6 3662.7 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">A^C \\ominus M</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-41\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-43\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2296\" d=\"M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM681 278Q669 385 591 463T381 542Q283 542 196 471T96 278V270H681V278ZM275 -42T388 -42T585 32T681 222V230H96V222Q108 107 191 33Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4D\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-41\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-43\" x=\"1061\" y=\"583\"></use>\n <use xlink:href=\"#E1-MJMAIN-2296\" x=\"1610\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-4D\" x=\"2611\" y=\"0\"></use>\n</g>\n</svg>。这两组结果取交集就是我们的最终结果了。</p>\n<p><img src=\"http://post-pic.nos-eastchina1.126.net/Image-Processing/hitmiss_2.jpg\" class=\"φcy\" alt=\"hitmiss_2\"></p>\n<p>下面是在车牌检测中使用的模板，前景和背景。将原模板侵蚀一下作为前景，膨胀后取反作为背景。</p>\n<p><img src=\"http://post-pic.nos-eastchina1.126.net/Image-Processing/template_A.jpg\" class=\"φcy\" alt=\"char_template\"></p>\n<p><img src=\"http://post-pic.nos-eastchina1.126.net/Image-Processing/FG.jpg\" class=\"φcy\" alt=\"FG\"></p>\n<p><img src=\"http://post-pic.nos-eastchina1.126.net/Image-Processing/BG.jpg\" class=\"φcy\" alt=\"BG\"></p>\n","prev":{"title":"PyTorch Note (1) —— Tensors and Operations","link":"post/pytorch_tensor_operation"},"next":{"title":"聊一聊物体检测的Metrics与Detection Theory","link":"post/Detection Theory"},"plink":"https://magi003769.github.io/post/morphologic_operation/","toc":[{"id":"morphological-operation","title":"Morphological Operation","index":"1"},{"id":"robustness","title":"Robustness","index":"2"},{"id":"hit-miss","title":"Hit-miss","index":"3"}]}