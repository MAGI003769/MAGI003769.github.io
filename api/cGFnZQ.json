{"per_page":7,"total":7,"current":1,"data":[{"title":"强行置顶：关于这个博客 About this blog","date":"2069-01-01T08:00:00.000Z","date_formatted":{"ll":"Jan 1, 2069","L":"01/01/2069","MM-DD":"01-01"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/header_imgs/home-2.jpg","excerpt":"<blockquote>\n<p><strong><em>“If you can’t explain it to a six year old, you don’t understand it yourself”</em></strong> </p>\n<p>—— Albert Einstein </p>\n</blockquote>","link":"post/关于这个博客","tags":["一些想法"],"categories":["自用树洞"]},{"title":"CS61B Week1：Java入门","date":"2019-08-01T07:00:00.000Z","date_formatted":{"ll":"Aug 1, 2019","L":"08/01/2019","MM-DD":"08-01"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/Java/HD_Java%E5%85%A5%E9%97%A8.jpg","excerpt":"<h1 id=\"java基础\">Java基础<a href=\"#java基础\" title=\"Java基础\"></a></h1><p>这部分是CS61b Lecture 1 内容的总结，非常概括的介绍了 Java 的一些基础知识。我们需要了解这些有关 Java 的基本特性，才能在后面的过程中更好的学习和写 Java 代码。</p>","link":"post/CS61B_Java入门","tags":["CS61B","Java"],"categories":["Java"]},{"title":"机器学习模型——支持向量机（2）","date":"2019-07-03T07:00:00.000Z","date_formatted":{"ll":"Jul 3, 2019","L":"07/03/2019","MM-DD":"07-03"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/Machine-Learning/HD_SVM_2.jpg","excerpt":"<p>上一篇关于SVM的post里面讨论了硬间隔和软间隔两种情况，而实际上SVM是可以扩展到比较极端的线性不可分情况的。本篇就接着前篇的内容，继续讨论SVM在线性不可分情况下的解决方案——引入核方法。之前关于SVM模型参数估计的方法也只有数学上的推导，这里还要介绍具体实现时要用到的SMO算法。中间的部分会穿插一些代码，解释相关步骤的实现。</p>","link":"post/支持向量机（2）","tags":["Machine Learning","SVM","李航","核方法"],"categories":["机器学习"]},{"title":"拉格朗日对偶与SVM","date":"2019-06-30T07:00:00.000Z","date_formatted":{"ll":"Jun 30, 2019","L":"06/30/2019","MM-DD":"06-30"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/Mathematics/HD_lagrange_duality.png","excerpt":"<p>在SVM的推导中，我们需要在限制条件下去优化<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"7.304ex\" height=\"5.176ex\" style=\"vertical-align: -1.838ex;\" viewBox=\"0 -1437.2 3144.9 2228.5\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">\\frac{1}{2}||w||^2</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMAIN-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-77\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n<g transform=\"translate(120,0)\">\n<rect stroke=\"none\" width=\"620\" height=\"60\" x=\"0\" y=\"220\"></rect>\n <use xlink:href=\"#E1-MJMAIN-31\" x=\"60\" y=\"676\"></use>\n <use xlink:href=\"#E1-MJMAIN-32\" x=\"60\" y=\"-687\"></use>\n</g>\n <use xlink:href=\"#E1-MJMAIN-7C\" x=\"860\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-7C\" x=\"1139\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-77\" x=\"1417\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-7C\" x=\"2134\" y=\"0\"></use>\n<g transform=\"translate(2412,0)\">\n <use xlink:href=\"#E1-MJMAIN-7C\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMAIN-32\" x=\"393\" y=\"675\"></use>\n</g>\n</g>\n</svg>，这时就需要利用拉格朗日对偶来构造一个方便计算机求解的优化问题。这篇post就介绍一下拉格朗日对偶和kkt条件等相关的概念。</p>","link":"post/拉格朗日对偶","tags":["Machine Learning","凸优化","拉格朗日对偶"],"categories":["学点数学"]},{"title":"机器学习模型——支持向量机（1）","date":"2019-06-25T07:00:00.000Z","date_formatted":{"ll":"Jun 25, 2019","L":"06/25/2019","MM-DD":"06-25"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/Machine-Learning/HD_SVM_1.jpg","excerpt":"<p>本篇是介绍支持向量机（SVM）的相关知识的其中一篇。因为SVM的相关内容很多，涵盖支持向量机的种类、软硬间隔以及核方法等相关概念，这一篇先讲解线性SVM以及软硬间隔的内容，主要是《统计学习方法》的搬运和一点个人理解。核方法和SMO算法会在另一篇中涉及。</p>","link":"post/支持向量机（1）","tags":["Machine Learning","SVM","李航"],"categories":["机器学习"]},{"title":"平衡二叉树","date":"2019-05-30T07:00:00.000Z","date_formatted":{"ll":"May 30, 2019","L":"05/30/2019","MM-DD":"05-30"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/Data%20Structure%20and%20Algorithm/HD_AVL.jpg","excerpt":"<p>在之前关于BST的讨论中，我们提到了简单的插入逻辑在某些特定条件下会使得BST从树结构退化成类似链表的线性结构，因此会导致搜索的复杂度从<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"7.914ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 3407.5 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">O(logn)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-67\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"0\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"763\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"1153\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"1451\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"1937\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"2417\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"3018\" y=\"0\"></use>\n</g>\n</svg>上升为<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.977ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 2143 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">O(n)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"0\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"763\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"1153\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"1753\" y=\"0\"></use>\n</g>\n</svg>。为了防止这种情况出现，便有了平衡树概念的提出。</p>","link":"post/平衡二叉树","tags":["Binary Search Tree","LeetCode","Tree"],"categories":["算法数据结构"]},{"title":"Binary Search Tree","date":"2019-05-25T07:00:00.000Z","date_formatted":{"ll":"May 25, 2019","L":"05/25/2019","MM-DD":"05-25"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/Data%20Structure%20and%20Algorithm/HD_BST.jpeg","excerpt":"<p>在学习kNN的算法实现的时候看到了KD Tree，它是二叉搜索树（Binary Search Tree）的一种。所以在学KD Tree构建的同时也把BST学一下。和以前一样，内容还是LeetCode相关Card的搬运和一些题目的实现。</p>","link":"post/Binary_Search_Tree","tags":["Binary Search Tree","LeetCode","Tree"],"categories":["算法数据结构"]}]}