{"title":"Java入门基础概念","date":"2019-08-01T07:00:00.000Z","date_formatted":{"ll":"Aug 1, 2019","L":"08/01/2019","MM-DD":"08-01"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/Java/HD_Java%E5%85%A5%E9%97%A8.jpg","link":"post/Java入门","tags":["CS61B","Java"],"categories":["Java"],"updated":"2020-05-22T18:52:32.998Z","content":"<h1 id=\"java基础\">Java基础<a href=\"#java基础\" title=\"Java基础\"></a></h1><p>这部分是CS61b Lecture 1 内容的总结，非常概括的介绍了 Java 的一些基础知识。我们需要了解这些有关 Java 的基本特性，才能在后面的过程中更好的学习和写 Java 代码。</p>\n<a id=\"more\"></a><h2 id=\"complation\">Complation<a href=\"#complation\" title=\"Complation\"></a></h2><p>下图展示是比较简略的 Java 程序运行流程。<code>.java</code> 文件是源代码，它通过JDK中的 <code>javac</code>编译器产生 <code>.class</code> 文件，方便后续的JRE中的解释器执行。</p>\n<p><img src=\"https://post-pic.nos-eastchina1.126.net/Java/java_compile.PNG\" class=\"φcy\" alt=\"java-compile\"></p>\n<h2 id=\"object-oriented\">Object-Oriented<a href=\"#object-oriented\" title=\"Object-Oriented\"></a></h2><p>所有的 <code>.java</code> 文件都必须包含类的声明。所有的代码实现都要依赖类的存在，甚至包括 helper functions、global constants 等等。如果一个编译之后的 <code>.class</code> 文件想要直接运行，那么它的源文件中定义的类就必须包含 <code>main</code> 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br></pre></td></tr></table></figure><p>Java中所有的函数都必须是某个类的一部分，所以Java中的函数（Function）都是类的方法（Method）。想要声明一个函数时，<code>public static</code>是关键，这个会在后面解释。</p>\n<h2 id=\"static-typing\">Static Typing<a href=\"#static-typing\" title=\"Static Typing\"></a></h2><p>Java中的变量都要在使用前声明，并明确数据类型且在之后的代码中无法修改。代码中使用的变量、传递的参数、函数返回的值（不能返回多个），这些都需要声明好。Java会在编译阶段进行类型检查，而不是像 Python 在执行的过程中进行。这也是造成程序执行速度差的原因之一。Static Typing 可以为我们带来一下的好处：</p>\n<ul><li>获取特定类型的错误，代码可读性更强，也更易理解，可以使得程序员debug更加方便</li>\n<li>用户端可以尽可能避免类型引发的错误</li>\n<li>避免运行时的类型检查（runtime type check），程序运行更高效</li>\n</ul><h2 id=\"syntax-issues\">Syntax Issues<a href=\"#syntax-issues\" title=\"Syntax Issues\"></a></h2><p>鉴于我是用惯了 Python 才开始学 Java 的菜鸡选手，再加上面提到了变量类型声明的相关需要，Java 的一些格式或者说语法要求就在这里多说一遍：</p>\n<ul><li>用 <code>{ }</code>来区分段落，而不是缩进</li>\n<li>每一行命令后面要以 <code>;</code> 结尾，花括号后面不需要</li>\n<li><strong>变量声明的时候要注明数据类型，e.g. <code>int x = 0</code></strong></li>\n<li><strong>函数声明要注明返回值的类型，是否静态等等</strong>。</li>\n<li>声明类的文件必须和韦德名称保持一致，否则会出现如下的错误</li>\n</ul><p><img src=\"https://post-pic.nos-eastchina1.126.net/Java/java_filename_error.PNG\" class=\"φcy\" alt=\"filename-error\"></p>\n<h1 id=\"类相关基础\">类相关基础<a href=\"#类相关基础\" title=\"类相关基础\"></a></h1><p>关于类的这部分是 Lecture 2 中的内容，主要介绍 Java 中类的定义、实例化以及主要包括静态方法和实例方法的一些细节。课程中定义了 <code>Dog</code> 这个类作为例子，其中声明了它的属性 <code>weight</code>和各种方法，包括静态和非静态两种。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> weight; <span class=\"comment\">// attribute</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Constructor */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dog</span><span class=\"params\">(<span class=\"keyword\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">        weight = w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Static methods */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">simpleNoise</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.Out.println(<span class=\"string\">\"bark!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Dog <span class=\"title\">maxDog</span><span class=\"params\">(Dog d1, Dog, d2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d1.weight &gt; d2.weight) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> d1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** None-static/Instance method */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">makeNoise</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (weight &lt; <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            System.Out.println(<span class=\"string\">\"yip!\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (weight &lt; <span class=\"number\">30</span>)&#123;</span><br><span class=\"line\">            System.Out.println(<span class=\"string\">\"bark!\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.Out.println(<span class=\"string\">\"woooof!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Dog <span class=\"title\">maxDog</span><span class=\"params\">(Dog d)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.weight &gt; d.weight) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>我们另外声明了一个类，用来声明主方法并调用我们的 <code>Dog</code>。后面讨论的各种代码都是在这个部分作更改再编译运行的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DogLauncher</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/** Some codes here */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"定义和实例化\">定义和实例化<a href=\"#定义和实例化\" title=\"定义和实例化\"></a></h2><p>我们可以通过以下指令创建 <code>Dog</code> 类的两个实例<code>d1</code>、<code>d2</code>。实例化通过使用一个数的 <code>int</code> 作为参数来设置实例的属性。需要注意的是实例创建时需要声明类型，创建时需要使用关键词 <code>new</code> 和构造器来进行实例化，这是与 Python 中最大的区别。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog d1 = <span class=\"keyword\">new</span> Dog(<span class=\"number\">15</span>);</span><br><span class=\"line\">Dog d2 = <span class=\"keyword\">new</span> Dog(<span class=\"number\">50</span>);</span><br></pre></td></tr></table></figure><p>如果我们想要创建一系列的实例组成一个 array，我们可以</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog[] manyDogs = <span class=\"keyword\">new</span> Dog[<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure><p>这里创建的实例没有使用需要整数的构造器，因此仅仅是确定了 array 中元素的类型，其中的元素都是 <code>Null</code>。如果在这之后试图直接获取每个元素的<code>weight</code>属性，就会报错：<code>Exception in thread &quot;main&quot; java.lang.NullPointerException</code>。</p>\n<h2 id=\"静态方法与实例方法\">静态方法与实例方法<a href=\"#静态方法与实例方法\" title=\"静态方法与实例方法\"></a></h2><p>按照我们在类中的声明，我们有两个<code>maxDog()</code>方法，它的作用是选出两只狗体重较大的一个。仅有一个实例作为参数的是非静态方法（实例方法），有两个实例作为参数的是静态方法。依然使用上面的两个实例，我们使用<strong>实例方法</strong>，可以获得结果50。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog bigger = d1.maxDog(d2);</span><br><span class=\"line\">System.out.println(bigger.weight);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">PS E:\\GitHub\\CS61b-Data-Structures&gt; javac DogLauncher.java</span></span><br><span class=\"line\"><span class=\"comment\">PS E:\\GitHub\\CS61b-Data-Structures&gt; java DogLauncher</span></span><br><span class=\"line\"><span class=\"comment\">50</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><p>同样的，我们按照下面的方式使用<strong>静态方法</strong>也可以得到相同的正确结果。我们需要注意到两个方法的调用方式：<strong>前者通过具体的实例调用方法；后者可以直接使用类的名称来调用，而不需要创建实例。</strong>这也是这两种函数声明方式产生的最大区别。如果想要使用一些其实不需要依赖对象存在的操作或者逻辑过程，比如说<code>Math.xxx()</code> 这种，我们就可以将所有的方法都声明成 <code>static</code> 方便调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog bigger = Dog.maxDog(d1, d2);</span><br><span class=\"line\">System.out.println(bigger.weight);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">PS E:\\GitHub\\CS61b-Data-Structures&gt; javac DogLauncher.java</span></span><br><span class=\"line\"><span class=\"comment\">PS E:\\GitHub\\CS61b-Data-Structures&gt; java DogLauncher</span></span><br><span class=\"line\"><span class=\"comment\">50</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><p>这里展示一下，不通过实例而通过类调用非静态方法，是无法通过编译的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog bigger = Dog.maxDog(d2);</span><br><span class=\"line\">System.out.println(bigger.weight);</span><br></pre></td></tr></table></figure><p><img src=\"https://post-pic.nos-eastchina1.126.net/Java/static_error.PNG\" class=\"φcy\" alt=\"static-error\"></p>\n<p><strong>总之，如果一个方法或者属性是静态的，我们就通过类来直接调用，不需要实例化；反之，对于非静态函数，我们就必须先创建一个实例然后才能使用。</strong>非静态函数中，想要访问调用方法的实例本身的某个属性，使用<code>this.weight</code> 或者直接使用 <code>weight</code>都是可行的。而静态函数的使用根本不涉及实例，因此除了可以使用参数实例的属性（<code>d1.weight &gt; d2.weight</code>）之外是存在其他属性可以使用的，也就没有所谓的 <code>this</code> 指针。而</p>\n<h1 id=\"关于main函数\">关于main函数<a href=\"#关于main函数\" title=\"关于main函数\"></a></h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br></pre></td></tr></table></figure><p>这是开篇提到的一个函数声明，根据之前的只是我们就可以解决它的意义：<code>public static</code> 使其成为一个方便调用的静态方法，<code>void</code>表示它不存在返回值，那么参数列表里的 <code>String[] args</code>是什么意思呢？它实际上是涉及到 Java 程序的命令行使用。如果我们在 <code>DogLauncher</code> 的主方法的最前面加上指令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(args[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure><p>并在运行时在原有命令的后面加上一串字符<code>&#39;hello&#39;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java DogLauncher hello</span><br></pre></td></tr></table></figure><p>那么在执行各种实例化和其他操作之前，这串字符就会被输出出来。</p>\n<h1 id=\"使用library\">使用Library<a href=\"#使用library\" title=\"使用Library\"></a></h1><p>写代码可以使用各种现成的库，除了Java的内建库（e.g. Math, String, Integer, List, Map）之外，还有<a href=\"https://introcs.cs.princeton.edu/java/stdlib/\" target=\"_blank\">Princeton: Standard Java Libraries</a> 可以使用。</p>\n<h1 id=\"reference\">Reference<a href=\"#reference\" title=\"Reference\"></a></h1><ul><li><a href=\"https://sp19.datastructur.es/\" target=\"_blank\">UC Berkley - CS61b 2019 Spring</a></li>\n</ul>","prev":{"title":"Java中的引用和传参","link":"post/嵌套类和内部类"},"next":{"title":"机器学习模型——支持向量机（2）","link":"post/支持向量机（2）"},"plink":"https://magi003769.github.io/post/Java入门/","toc":[{"id":"java基础","title":"Java基础","index":"1","children":[{"id":"complation","title":"Complation","index":"1.1"},{"id":"object-oriented","title":"Object-Oriented","index":"1.2"},{"id":"static-typing","title":"Static Typing","index":"1.3"},{"id":"syntax-issues","title":"Syntax Issues","index":"1.4"}]},{"id":"类相关基础","title":"类相关基础","index":"2","children":[{"id":"定义和实例化","title":"定义和实例化","index":"2.1"},{"id":"静态方法与实例方法","title":"静态方法与实例方法","index":"2.2"}]},{"id":"关于main函数","title":"关于main函数","index":"3"},{"id":"使用library","title":"使用Library","index":"4"},{"id":"reference","title":"Reference","index":"5"}]}