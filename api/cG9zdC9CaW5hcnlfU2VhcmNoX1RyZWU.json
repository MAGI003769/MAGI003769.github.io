{"title":"Binary Search Tree","date":"2019-05-25T07:00:00.000Z","date_formatted":{"ll":"May 25, 2019","L":"05/25/2019","MM-DD":"05-25"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/Data%20Structure%20and%20Algorithm/HD_BST.jpeg","link":"post/Binary_Search_Tree","tags":["Binary Search Tree","LeetCode","Tree"],"categories":["算法数据结构"],"updated":"2019-06-21T06:15:34.000Z","content":"<p>在学习kNN的算法实现的时候看到了KD Tree，它是二叉搜索树（Binary Search Tree）的一种。所以在学KD Tree构建的同时也把BST学一下。和以前一样，内容还是LeetCode相关Card的搬运和一些题目的实现。</p>\n<a id=\"more\"></a><h1 id=\"binary-search-tree\">Binary Search Tree<a href=\"#binary-search-tree\" title=\"Binary Search Tree\"></a></h1><p>二叉搜索树（BST）其实是二叉树的一种特殊形式。它特殊在树的构建时，需要遵循以下的一些规则</p>\n<blockquote>\n<ol><li>某一节点的value要<strong>大于等于</strong>其<strong>左侧子树</strong>所有节点的value</li>\n<li>某一节点的value要<strong>小于等于</strong>其<strong>右侧子树</strong>所有节点的value</li>\n</ol></blockquote>\n<p>上面这两个性质是非常重要的，在后续进一步讨论平衡树时会用到。和一般的二叉树一样BST也可以进行<code>pre-order</code>、<code>inorder</code>和<code>post-order</code>的树遍历，比较独特的一点是，BST的<code>inorder</code>遍历结果是<strong>升序</strong>的。因此<code>inorder</code>遍历是BST最常用的便利方式。</p>\n<h2 id=\"bst的验证\">BST的验证<a href=\"#bst的验证\" title=\"BST的验证\"></a></h2><p>根据之前描述的BST性质，我们需要在递归的过程中，用当前当前节点的值更新比较边界：对于左侧子树更新上界<code>upper</code>，对右侧子树更新下界<code>lower</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isValidBST</span><span class=\"params\">(self, root, upper=float<span class=\"params\">(<span class=\"string\">'inf'</span>)</span>, lower=float<span class=\"params\">(<span class=\"string\">'-inf'</span>)</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> root.val &gt;= upper <span class=\"keyword\">or</span> root.val &lt;= lower:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.isValidBST(root.left, min(upper, root.val), lower) <span class=\"keyword\">and</span> \\</span><br><span class=\"line\">               self.isValidBST(root.right, upper, max(lower, root.val))</span><br></pre></td></tr></table></figure><h2 id=\"二叉搜索树的迭代器\">二叉搜索树的迭代器<a href=\"#二叉搜索树的迭代器\" title=\"二叉搜索树的迭代器\"></a></h2><p><a href=\"https://leetcode.com/problems/binary-search-tree-iterator/\" target=\"_blank\">173. Binary Search Tree Iterator</a>我本来的想法是直接用<code>inorder</code>的遍历方法，将整个树转成一个升序数组。然而这个题实际上是将这个遍历方法拆开来。<code>__init__</code>将栈直接推到第一个最底层的左节点。调用<code>next</code>将堆最顶端的节点pop出来，再以这个节点的右子节点为起点继续往堆里添加节点。<code>hasNext</code>直接检查堆的长度就可以实现。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BSTIterator</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.stack = []</span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">            self.stack.append(root)</span><br><span class=\"line\">            root = root.left</span><br><span class=\"line\">                </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @return the next smallest number</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        node = self.stack.pop()</span><br><span class=\"line\">        val = node.val</span><br><span class=\"line\">        node = node.right</span><br><span class=\"line\">        <span class=\"keyword\">while</span> node:</span><br><span class=\"line\">            self.stack.append(node)</span><br><span class=\"line\">            node = node.left</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hasNext</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @return whether we have a next smallest number</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(self.stack) &gt; <span class=\"number\">0</span></span><br></pre></td></tr></table></figure><h1 id=\"bst的基本操作\">BST的基本操作<a href=\"#bst的基本操作\" title=\"BST的基本操作\"></a></h1><p>我们先梳理一下二叉树的基本操作有哪些</p>\n<blockquote>\n<ol><li>插入（增加）节点</li>\n<li>删除节点</li>\n<li>搜索节点</li>\n</ol></blockquote>\n<h2 id=\"bst的搜索\">BST的搜索<a href=\"#bst的搜索\" title=\"BST的搜索\"></a></h2><p>基于上面BST的性质，就可以很轻易的在树里面找到节点。<strong>目标小于当前节点值就继续向左侧搜索，大于就向右搜索，知道相等或到达最深</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">searchBST</span><span class=\"params\">(self, root, val)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root <span class=\"keyword\">or</span> root.val == val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root</span><br><span class=\"line\">        <span class=\"keyword\">if</span> val &lt; root.val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.searchBST(root.left, val)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> val &gt; root.val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.searchBST(root.right, val)</span><br></pre></td></tr></table></figure><h2 id=\"在bst中插入新节点\">在BST中插入新节点<a href=\"#在bst中插入新节点\" title=\"在BST中插入新节点\"></a></h2><p>这就是一个非常简单的按照BST逻辑进行插入的方法。这个简单逻辑并不能保证生成的BST是Balanced Tree，平衡树概念的相关介绍会在后面一节介绍。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insertIntoBST</span><span class=\"params\">(self, root, val)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> TreeNode(val)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> val &gt; root.val:</span><br><span class=\"line\">            root.right = self.insertIntoBST(root.right, val)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            root.left = self.insertIntoBST(root.left, val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure><h2 id=\"删除bst中的节点\">删除BST中的节点<a href=\"#删除bst中的节点\" title=\"删除BST中的节点\"></a></h2><p>这个操作比之前的都稍微麻烦一点，以为被删除节点的子树可能有以下三种不同的情况：</p>\n<blockquote>\n<ol><li>如果该节点没有子节点，直接删除</li>\n<li>如果该节点有一个子节点，用该子节点替换被删除的节点</li>\n<li>如果该节点有两个子节点，在其子树中寻找其在in-order排序下的前一个或后一个元素，进行替换并将找到的这个节点删除</li>\n</ol></blockquote>\n<p><img src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/01/25/bst_deletion_case_3.png\" class=\"φcy\" alt=\"img\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deleteNode</span><span class=\"params\">(self, root, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type key: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root</span><br><span class=\"line\">        <span class=\"keyword\">if</span> key &lt; root.val:</span><br><span class=\"line\">            root.left = self.deleteNode(root.left, key)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> key &gt; root.val:</span><br><span class=\"line\">            root.right = self.deleteNode(root.right, key)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root.left:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> root.right</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> root.right:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> root.left</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                predec = root.left</span><br><span class=\"line\">                <span class=\"keyword\">while</span> predec.right:</span><br><span class=\"line\">                    predec = predec.right</span><br><span class=\"line\">                root.val = predec.val</span><br><span class=\"line\">                root.left = self.deleteNode(root.left, predec.val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure><h1 id=\"height-balanced-tree\">Height-balanced Tree<a href=\"#height-balanced-tree\" title=\"Height-balanced Tree\"></a></h1><blockquote>\n<p>平衡树是计算机科学中的一类改进的二叉查找树。一般的二叉查找树的查询复杂度是跟目标结点到树根的距离（即深度）有关，因此当结点的深度普遍较大时，查询的均摊复杂度会上升，为了更高效的查询，平衡树应运而生了。在这里，平衡指所有叶子的深度趋于平衡，更广义的是指在树上所有可能查找的均摊复杂度偏低。</p>\n</blockquote>\n<p>这是Wiki上面对平衡二叉树的一种描述。我们可以想象一下在构建BST的时候，如果传入的序列是一个排好序的，那么节点就会不断出现在节点的同一侧。这样，树就退化成了一个类似链表的结构。那么操作的复杂度就有可能从<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"8.961ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 3858.4 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">O(log_2n)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-67\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"0\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"763\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"1153\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"1451\" y=\"0\"></use>\n<g transform=\"translate(1937,0)\">\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMAIN-32\" x=\"675\" y=\"-213\"></use>\n</g>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"2868\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"3468\" y=\"0\"></use>\n</g>\n</svg>退化成<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.977ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 2143 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">O(n)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"0\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"763\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"1153\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"1753\" y=\"0\"></use>\n</g>\n</svg>的线性情况。因此就出现了使用Balanced Tree的概念。</p>\n<h2 id=\"用sorted-array构建bst\">用sorted array构建BST<a href=\"#用sorted-array构建bst\" title=\"用sorted array构建BST\"></a></h2><p>先给一个非常直观的递归解决，每次都选择中间的元素创造新的节点，再将其两侧的序列<code>nums[:mid]</code>和<code>nums[mid+1:]</code>作为参数去构建该节点的子树。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sortedArrayToBST</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        mid = len(nums) // <span class=\"number\">2</span></span><br><span class=\"line\">        root = TreeNode(nums[mid])</span><br><span class=\"line\">        root.left = self.sortedArrayToBST(nums[:mid])</span><br><span class=\"line\">        root.right = self.sortedArrayToBST(nums[mid+<span class=\"number\">1</span>:])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure><p>在给定数组的情况下，我们可以用上面这样的方法来构造BST。但如果我们的输入不是整个数组，而是需要从一个数据流中构建BST呢？不管这个数据流是否有序，我们都无法保证BST在搜索时的高效性。这就是我们之前所说，BST结构退化成线性结构的问题。关于平衡二叉树的讨论会在一篇专门的post里面讨论。</p>\n<h1 id=\"reference\">Reference<a href=\"#reference\" title=\"Reference\"></a></h1><ul><li><p><a href=\"[https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91](https://baike.baidu.com/item/平衡二叉树)\">Baike - 平衡二叉树</a></p>\n</li>\n<li><p><a href=\"[https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91](https://zh.wikipedia.org/wiki/平衡树)\">Wiki - 平衡树</a></p>\n</li>\n</ul>","prev":{"title":"平衡二叉树","link":"post/平衡二叉树"},"next":{"title":"链表的双指针","link":"post/链表的双指针"},"plink":"https://magi003769.github.io/post/Binary_Search_Tree/","toc":[{"id":"binary-search-tree","title":"Binary Search Tree","index":"1","children":[{"id":"bst的验证","title":"BST的验证","index":"1.1"},{"id":"二叉搜索树的迭代器","title":"二叉搜索树的迭代器","index":"1.2"}]},{"id":"bst的基本操作","title":"BST的基本操作","index":"2","children":[{"id":"bst的搜索","title":"BST的搜索","index":"2.1"},{"id":"在bst中插入新节点","title":"在BST中插入新节点","index":"2.2"},{"id":"删除bst中的节点","title":"删除BST中的节点","index":"2.3"}]},{"id":"height-balanced-tree","title":"Height-balanced Tree","index":"3","children":[{"id":"用sorted-array构建bst","title":"用sorted array构建BST","index":"3.1"}]},{"id":"reference","title":"Reference","index":"4"}]}