{"per_page":7,"total":8,"current":5,"data":[{"title":"Python中的装饰器与类中的property","date":"2018-06-30T07:00:00.000Z","date_formatted":{"ll":"Jun 30, 2018","L":"06/30/2018","MM-DD":"06-30"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/header_imgs/post-bg.jpg","excerpt":"<p>原来读 python 代码的时候，经常遇到 <code>@</code> 这个符号却并不知道是个啥意思。它经常出现在某一个类的函数定义前。这就是 python 的一个语法糖 —— 装饰器（Decorator）。考虑到模块化的设计，<strong>装饰器帮助我们在不改变函数定义的情况下，增加需要的功能</strong>，比如输出日志，性能测试，事务处理、缓存、权限校验等。</p>","link":"post/decorator","tags":["Decorator","Python","基本概念","面试"],"categories":["Python"]},{"title":"机器学习模型——逻辑斯谛回归","date":"2018-06-28T07:00:00.000Z","date_formatted":{"ll":"Jun 28, 2018","L":"06/28/2018","MM-DD":"06-28"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/Machine-Learning/linear_vs_logistic_regression.jpg","excerpt":"<p>逻辑斯谛回归（Logistic Regression）是统计学习中的一个经典方法。最大熵是概率模型学习中的一种准则，将其推广到分类问题得到最大熵模型（Maximum Entropy Model）。二者都属于对数线性模型模型。</p>","link":"post/逻辑斯谛","tags":["Logistic Regression","Machine Learning"],"categories":["机器学习"]},{"title":"PyTorch Note (2) —— Autograd","date":"2018-06-22T07:00:00.000Z","date_formatted":{"ll":"Jun 22, 2018","L":"06/22/2018","MM-DD":"06-22"},"excerpt":"<p><code>autograd</code> 包是 pytorch 构建神经网络的核心。他为所有的张量运算提供了自动求导的方法。而这是一个 <strong>define-by-run</strong> 的框架，这意味着反向传播的过程取决于你的代码如何运行。甚至每一次迭代都可以有所不同。</p>","link":"post/pytorch_autograd","tags":["Frameworks","PyTorch"],"categories":["学习笔记"]},{"title":"经典的降维方法——PCA","date":"2018-06-20T07:00:00.000Z","date_formatted":{"ll":"Jun 20, 2018","L":"06/20/2018","MM-DD":"06-20"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/header_imgs/pixel-water.jpg","excerpt":"<p>在数据处理和一部分特征工程中，降维一直都是非常重要的一步。这篇 post 就简单介绍一下主成分分析法（PCA）的计算过程和实现。</p>","link":"post/PCA","tags":["Machine Learning","PCA"],"categories":["机器学习"]},{"title":"PyTorch Note (1) —— Tensors and Operations","date":"2018-06-15T07:00:00.000Z","date_formatted":{"ll":"Jun 15, 2018","L":"06/15/2018","MM-DD":"06-15"},"excerpt":"<p>最近听说 PyTorch 很好用，所以就开始看一下。起码不用每次想看 tensor 维度的时候都必须要 feed 然后 run session。PyTorch 中的张量实现非常类似于 Numpy 中的 <code>ndarray</code>，因此在使用时有很多地方很类似于 Numpy。这里就记录一些 PyTorch 的常用接口。</p>","link":"post/pytorch_tensor_operation","tags":["Frameworks","PyTorch"],"categories":["学习笔记"]},{"title":"Morphological Operation","date":"2018-05-20T07:00:00.000Z","date_formatted":{"ll":"May 20, 2018","L":"05/20/2018","MM-DD":"05-20"},"excerpt":"<p>Morphology (形态学) 大概是图像处理这门课最后一部分的内容了，最后一次作业包括了数硬币和车牌识别两个部分。虽然说形态学是图像处理的一个重要分支，但是总感觉这个方法并不是那么得高明，感觉像是一种 pixel level 的匹配，也谈不上什么特征不特征的。不过作为计算机视觉中的经典方法，也算是在早期起到了一定的作用。这一篇博客就简单的谈一下这方面的话题。</p>","link":"post/morphologic_operation","tags":["Image-processing","Morphological Operation"],"categories":["图像处理"]},{"title":"聊一聊物体检测的Metrics与Detection Theory","date":"2018-04-27T07:00:00.000Z","date_formatted":{"ll":"Apr 27, 2018","L":"04/27/2018","MM-DD":"04-27"},"excerpt":"<p>最近在做 FYP 的收尾工作了，需要将模型的精度用一个量化的形式去衡量。正巧 Data Communication 的课上也涉及到了检测的相关内容，于是就在这里做个整理，也帮马上就要写的论文整理一下思路。虽然我个人觉得有的时候只用这种精度来衡量模型的好坏并不能非常全面的衡量，但毕竟这些标准是有理论支持的、相对客观的。而且真正在工业实践中比较模型好坏时，肯定不能用人眼的主观感受去判断，人们更愿意用数据说话。</p>","link":"post/Detection Theory","tags":["Detection Theory","Object-Detection"],"categories":["目标检测"]}]}