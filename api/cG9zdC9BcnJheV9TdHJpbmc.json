{"title":"Array and String","date":"2019-03-25T07:00:00.000Z","date_formatted":{"ll":"Mar 25, 2019","L":"03/25/2019","MM-DD":"03-25"},"thumbnail":"https://post-pic.nos-eastchina1.126.net/header_imgs/home-3.jpg","link":"post/Array_String","tags":["Array","LeetCode","String"],"categories":["算法数据结构"],"updated":"2019-05-26T23:09:08.000Z","content":"<p>LeetCode 上面 <a href=\"https://leetcode.com/explore/learn/card/array-and-string/\" target=\"_blank\">Array and String</a> 专题的搬运。其实这两个没什么可讲的，主要就是记一下这个Card下面比较难刷的题目，和偶然发现的一些坑。</p>\n<a id=\"more\"></a><h1 id=\"array\">Array<a href=\"#array\" title=\"Array\"></a></h1><p>刷这部分的题目时，遇到问题比较多的是2D-array的题目。下面两个就是做题过程中花了很长时间的两道题。</p>\n<h2 id=\"498-diagonal-traverse\">498. Diagonal Traverse<a href=\"#498-diagonal-traverse\" title=\"498. Diagonal Traverse\"></a></h2><p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/diagonal_traverse.png\" class=\"φcy\" alt=\"zig-zag\"></p>\n<p><a href=\"https://leetcode.com/problems/diagonal-traverse\" target=\"_blank\">498. Diagonal Traverse</a> 题目要求我们使用上图所示的模式来遍历给定的二维数组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findDiagonalOrder</span><span class=\"params\">(self, matrix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type matrix: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> matrix == [] <span class=\"keyword\">or</span> matrix[<span class=\"number\">0</span>] == []:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        row, col = len(matrix), len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        ans = [<span class=\"number\">0</span>] * (row * col)</span><br><span class=\"line\">        i, j = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\">#direct = [-1, 1]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(len(ans)):</span><br><span class=\"line\">            ans[n] = matrix[i][j]</span><br><span class=\"line\">            up = (i+j) % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> up:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> j == col - <span class=\"number\">1</span>:</span><br><span class=\"line\">                    i += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> i == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    j += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    i -= <span class=\"number\">1</span></span><br><span class=\"line\">                    j += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i == row - <span class=\"number\">1</span>:</span><br><span class=\"line\">                    j += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> j == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    i += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    i += <span class=\"number\">1</span></span><br><span class=\"line\">                    j -= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"comment\">#print(ans, (i, j))</span></span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure><h2 id=\"59-spiral-matrix-ii\">59. Spiral Matrix II<a href=\"#59-spiral-matrix-ii\" title=\"59. Spiral Matrix II\"></a></h2><p><a href=\"https://leetcode.com/problems/spiral-matrix-ii/\" target=\"_blank\">59. Spiral Matrix II</a> 这道题依然是一个2D-Array的题目。解题的思路在与4个动态的boundary和周期变化的方向。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generateMatrix</span><span class=\"params\">(self, n)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        ans = [[<span class=\"number\">0</span>] * n <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n)]</span><br><span class=\"line\">        nums = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n*n+<span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"comment\"># constrain of 4 sides (index)</span></span><br><span class=\"line\">        left, up = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        right, bottom = n - <span class=\"number\">1</span>, n - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># direction</span></span><br><span class=\"line\">        direct = <span class=\"number\">0</span></span><br><span class=\"line\">        idx = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> idx &lt; n*n:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> direct == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(left, right+<span class=\"number\">1</span>):</span><br><span class=\"line\">                    ans[up][i] = nums[idx]</span><br><span class=\"line\">                    idx += <span class=\"number\">1</span></span><br><span class=\"line\">                up += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> direct == <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(up, bottom+<span class=\"number\">1</span>):</span><br><span class=\"line\">                    ans[i][right] = nums[idx]</span><br><span class=\"line\">                    idx += <span class=\"number\">1</span></span><br><span class=\"line\">                right -= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> direct == <span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(right, left<span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">                    ans[bottom][i] = nums[idx]</span><br><span class=\"line\">                    idx += <span class=\"number\">1</span></span><br><span class=\"line\">                bottom -= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> direct == <span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(bottom, up<span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">                    ans[i][left] = nums[idx]</span><br><span class=\"line\">                    idx += <span class=\"number\">1</span></span><br><span class=\"line\">                left += <span class=\"number\">1</span></span><br><span class=\"line\">            direct = (direct+<span class=\"number\">1</span>) % <span class=\"number\">4</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure><p><strong>这里插播一条关于Python的坑。</strong>这个solution的开头我们初始化要返回的矩阵时使用<code>ans = [[0] * n for i in range(n)]</code> ，不能用<code>ans=[[0]*n]*n</code>。</p>\n<h1 id=\"two-pointer\">Two-Pointer<a href=\"#two-pointer\" title=\"Two-Pointer\"></a></h1><p>Two-Pointer是一种十分常用的方法。看上去很简单，但有的时候使用得当的话会有非常好的效果，一个经典的例子就是对sorted的序列做搜索，也就是使用binary search。下面是几个非常之有趣的two-pointer方法。</p>\n<h2 id=\"209-minimum-size-subarray-sum\">209. Minimum Size Subarray Sum<a href=\"#209-minimum-size-subarray-sum\" title=\"209. Minimum Size Subarray Sum\"></a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minSubArrayLen</span><span class=\"params\">(self, s, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: int</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        sum_ = head = <span class=\"number\">0</span></span><br><span class=\"line\">        ans = len(nums) + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> tail <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">            sum_ += nums[tail]</span><br><span class=\"line\">            <span class=\"keyword\">while</span> sum_ &gt;= s:</span><br><span class=\"line\">                ans = min(ans, tail - head + <span class=\"number\">1</span>)</span><br><span class=\"line\">                sum_ -= nums[head]</span><br><span class=\"line\">                head += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans <span class=\"keyword\">if</span> ans &lt;= len(nums) <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure><h1 id=\"string\">String<a href=\"#string\" title=\"String\"></a></h1><p><code>String</code>也是很常用的数据结构，程序员基本也无法避免处理字符串对象。大部分的高级语言里面都有相关的实现，使用起来其实还是挺方便的。<strong>Python里面有一个值得注意的点，它的<code>str</code>对象支持下标访问，但是不支持利用下标去单独对某一字符或者片段赋值。</strong></p>\n<h2 id=\"205-isomorphic-strings\">205. Isomorphic Strings<a href=\"#205-isomorphic-strings\" title=\"205. Isomorphic Strings\"></a></h2><p>这道题<a href=\"https://leetcode.com/problems/isomorphic-strings/\" target=\"_blank\">205. Isomorphic Strings</a>算是一个字符串的match问题，<a href=\"https://leetcode.com/problems/find-and-replace-pattern/\" target=\"_blank\">890. Find and Replace Pattern</a>可以用几乎一模一样的方法解决。题目要求比较两个字符串<code>s</code>和<code>t</code>是否有相同的pattern。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isIsomorphic</span><span class=\"params\">(self, s, t)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :type t: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">        map_s, map_t = &#123;&#125;, &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">        code_s, code_t = '', ''</span></span><br><span class=\"line\"><span class=\"string\">        '''</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(s, t)</span>:</span></span><br><span class=\"line\">            mapping = &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> t[i] != mapping[s[i]]:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">                <span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">                    mapping[s[i]] = t[i]</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> check(s, t) <span class=\"keyword\">and</span> check(t, s)</span><br></pre></td></tr></table></figure><p>一个简单人直接想法就是使用<code>dict</code>建立起两个字符串的对应关系。但是进行但相比较的时候出现了错误：<code>s = &quot;ab&quot;</code>与<code>t = &quot;aa&quot;</code>。从<code>s</code>映射到<code>t</code>的单向比较，会使得<code>&#39;a&#39;</code>、<code>&#39;b&#39;</code>均对应<code>&#39;a&#39;</code>而没有后续的字符进行比较发现这个错误。再加一个反相比较，就可以了。</p>\n<h2 id=\"796-rotate-string\">796. Rotate String<a href=\"#796-rotate-string\" title=\"796. Rotate String\"></a></h2><p><a href=\"https://leetcode.com/problems/rotate-string/\" target=\"_blank\">796. Rotate String</a>这道题虽然是个easy但是很有趣，有点脑筋急转弯。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rotateString</span><span class=\"params\">(self, A, B)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type A: str</span></span><br><span class=\"line\"><span class=\"string\">        :type B: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(A) == len(B) <span class=\"keyword\">and</span> B <span class=\"keyword\">in</span> A+A</span><br></pre></td></tr></table></figure>","prev":{"title":"牛顿法","link":"post/牛顿法"},"next":{"title":"Batch Normalization：定义与实现","link":"post/Batch norm"},"plink":"https://magi003769.github.io/post/Array_String/","toc":[{"id":"array","title":"Array","index":"1","children":[{"id":"498-diagonal-traverse","title":"498. Diagonal Traverse","index":"1.1"},{"id":"59-spiral-matrix-ii","title":"59. Spiral Matrix II","index":"1.2"}]},{"id":"two-pointer","title":"Two-Pointer","index":"2","children":[{"id":"209-minimum-size-subarray-sum","title":"209. Minimum Size Subarray Sum","index":"2.1"}]},{"id":"string","title":"String","index":"3","children":[{"id":"205-isomorphic-strings","title":"205. Isomorphic Strings","index":"3.1"},{"id":"796-rotate-string","title":"796. Rotate String","index":"3.2"}]}]}