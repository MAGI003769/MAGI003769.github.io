{"title":"LeetCode：Bit Manipulation","date":"2018-01-28T03:55:30.000Z","date_formatted":{"ll":"Jan 27, 2018","L":"01/27/2018","MM-DD":"01-27"},"link":"post/Bit Operation","tags":["CS-Basic","LeetCode"],"categories":["学习笔记"],"updated":"2020-05-10T23:06:28.000Z","content":"<h1 id=\"bit-operation\">Bit Operation<a href=\"#bit-operation\" title=\"Bit Operation\"></a></h1><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th>Operation</th><th>Symbol</th><th>Illustration</th></tr>\n</thead><tbody><tr>\n<td>Bit-wise AND</td><td>&amp;</td><td></td></tr>\n<tr>\n<td>Bit-wise OR</td><td>|</td><td></td></tr>\n<tr>\n<td>Bit-wise XOR</td><td>^</td><td></td></tr>\n<tr>\n<td>Invert</td><td>~</td><td></td></tr>\n<tr>\n<td>Shift left</td><td>&lt;&lt;</td><td>Logic Shift: covering positions with 0s</td></tr>\n<tr>\n<td>Shift right</td><td>&gt;&gt;</td><td>Logic Shift: covering positions with 0s</td></tr>\n<tr>\n<td>Shift (unsigned)</td><td>&gt;&gt;&gt;</td><td>Arithmetic Shift: original right-side bits will be shifted to the left-side</td></tr>\n</tbody></table></div></div><h1 id=\"boolean-algebra\">Boolean Algebra<a href=\"#boolean-algebra\" title=\"Boolean Algebra\"></a></h1><p>It could be better to know some knowledge of <a href=\"https://en.wikipedia.org/wiki/Boolean_algebra\" target=\"_blank\">Boolean Algebra</a> when we try to understand some elegant solution of LeetCode problems in the discipline of bit manipulation. This section may also have some contents from my Digital Circuit module. </p>\n<h2 id=\"adder\">Adder<a href=\"#adder\" title=\"Adder\"></a></h2><p><img src=\"https://upload.wikimedia.org/wikipedia/commons/d/d9/Half_Adder.svg\" class=\"φcy\" alt=\"half-adder\"></p>\n<p>Figure above shows a <strong>half adder</strong>. The mathematic expression for such a unit can be describe as formula below. This adder is called “half” because it doesn’t consider about the carry input. </p>\n<p style=\"text-align:center\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"11.964ex\" height=\"5.843ex\" style=\"vertical-align: -2.338ex;\" viewBox=\"0 -1508.9 5151 2515.6\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">\\begin{aligned}\nS &amp;= A \\oplus B \\\\\nC &amp;= AB\n\\end{aligned}</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-53\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-41\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2295\" d=\"M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-42\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-43\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n<g transform=\"translate(167,0)\">\n<g transform=\"translate(-11,0)\">\n <use xlink:href=\"#E1-MJMATHI-53\" x=\"115\" y=\"600\"></use>\n <use xlink:href=\"#E1-MJMATHI-43\" x=\"0\" y=\"-700\"></use>\n</g>\n<g transform=\"translate(750,0)\">\n<g transform=\"translate(0,600)\">\n <use xlink:href=\"#E1-MJMAIN-3D\" x=\"277\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-41\" x=\"1334\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-2295\" x=\"2306\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-42\" x=\"3307\" y=\"0\"></use>\n</g>\n<g transform=\"translate(0,-700)\">\n <use xlink:href=\"#E1-MJMAIN-3D\" x=\"277\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-41\" x=\"1334\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-42\" x=\"2084\" y=\"0\"></use>\n</g>\n</g>\n</g>\n</g>\n</svg></p>\n<p>Thus, for a <strong>full adder</strong>, the configuration considers about carry input as shown in figure below. </p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/69/Full-adder_logic_diagram.svg/440px-Full-adder_logic_diagram.svg.png\" class=\"φcy\" alt=\"full-adder\"></p>\n<p>The mathematic expression of each output is</p>\n<p style=\"text-align:center\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"27.837ex\" height=\"5.843ex\" style=\"vertical-align: -2.338ex;\" viewBox=\"0 -1508.9 11985.2 2515.6\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">\\begin{aligned}\nS &amp;= A \\oplus B \\oplus C_{in} \\\\\nC_{out} &amp;= AB + (C_{in}(A \\oplus B))\n\\end{aligned}</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-53\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-41\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2295\" d=\"M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-42\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-43\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-75\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n<g transform=\"translate(167,0)\">\n<g transform=\"translate(-11,0)\">\n <use xlink:href=\"#E1-MJMATHI-53\" x=\"1173\" y=\"625\"></use>\n<g transform=\"translate(0,-675)\">\n <use xlink:href=\"#E1-MJMATHI-43\" x=\"0\" y=\"0\"></use>\n<g transform=\"translate(715,-150)\">\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-6F\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-75\" x=\"485\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-74\" x=\"1058\" y=\"0\"></use>\n</g>\n</g>\n</g>\n<g transform=\"translate(1808,0)\">\n<g transform=\"translate(0,625)\">\n <use xlink:href=\"#E1-MJMAIN-3D\" x=\"277\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-41\" x=\"1334\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-2295\" x=\"2306\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-42\" x=\"3307\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-2295\" x=\"4289\" y=\"0\"></use>\n<g transform=\"translate(5289,0)\">\n <use xlink:href=\"#E1-MJMATHI-43\" x=\"0\" y=\"0\"></use>\n<g transform=\"translate(715,-150)\">\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-69\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-6E\" x=\"345\" y=\"0\"></use>\n</g>\n</g>\n</g>\n<g transform=\"translate(0,-675)\">\n <use xlink:href=\"#E1-MJMAIN-3D\" x=\"277\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-41\" x=\"1334\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-42\" x=\"2084\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-2B\" x=\"3066\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"4067\" y=\"0\"></use>\n<g transform=\"translate(4456,0)\">\n <use xlink:href=\"#E1-MJMATHI-43\" x=\"0\" y=\"0\"></use>\n<g transform=\"translate(715,-150)\">\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-69\" x=\"0\" y=\"0\"></use>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-6E\" x=\"345\" y=\"0\"></use>\n</g>\n</g>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"5940\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-41\" x=\"6330\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-2295\" x=\"7303\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-42\" x=\"8303\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"9063\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"9452\" y=\"0\"></use>\n</g>\n</g>\n</g>\n</g>\n</svg></p>\n<p>These information may provide us some methods to resolve the problem “Addition of two integers”. Guided by the mathematic expression above (Here, the may only use half-adder), we have following procedures to implement addition with bit operators:</p>\n<ul><li>sum &lt;- A <code>^</code> B</li>\n<li>C &lt;- A <code>&amp;</code> B</li>\n<li>B &lt;- C <code>&lt;&lt;</code> 1</li>\n</ul><p>Repeat the procedures until the carry <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.766ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 760.5 936.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">C</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-43\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-43\" x=\"0\" y=\"0\"></use>\n</g>\n</svg> becomes 0. This is exactly what we do when we manually calculate the binary addition. We firstly add the two number in bitwise and note the carries which should be shifted one bit to the left. </p>\n<p><img src=\"http://post-pic.nos-eastchina1.126.net/LeetCode/add-two.PNG\" class=\"φcy\" alt=\"sketch\"></p>\n<h2 id=\"comparator\">Comparator<a href=\"#comparator\" title=\"Comparator\"></a></h2><p>Above all, it is quite easy to compare whether two numbers are equal as we have <code>^</code> operator. If A and B are equal, the result of A<code>^</code>B will be 0, otherwise, it will be none-zero value. Of course, this inference confirms only when A and B have the same data type (e.g. both are <code>int</code>). </p>\n<h1 id=\"exercises\">Exercises<a href=\"#exercises\" title=\"Exercises\"></a></h1><h2 id=\"addition-of-two-integers\">Addition of two integers<a href=\"#addition-of-two-integers\" title=\"Addition of two integers\"></a></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getSum</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(y)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> carry = x &amp; y;</span><br><span class=\"line\">            x ^= y;</span><br><span class=\"line\">            y = carry &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; Solution::getSum(<span class=\"number\">18</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"hamming-weight\">Hamming Weight<a href=\"#hamming-weight\" title=\"Hamming Weight\"></a></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Hamming_weight</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> weight = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            x &amp;= x - <span class=\"number\">1</span>;</span><br><span class=\"line\">            ++ weight;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> weight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = Solution::Hamming_weight(<span class=\"number\">64</span>);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; result;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>To evaluate the performance, a C-standard-library <code>time.h</code> is used to measure the execution time. It can exactly measure the time when the function runs.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">clock_t</span> start, finish;</span><br><span class=\"line\">start = clock();</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">     * the part you want to measure</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">finish = clock();</span><br></pre></td></tr></table></figure><p><strong>Here</strong> is a little trick to get rid of the annoying instantiation of <code>class Solution</code> during the practice coding.</p>\n<blockquote>\n<p><code>static</code> methods are functions which only use the class as a namespace, and do not require an instance.</p>\n</blockquote>\n<h2 id=\"hamming-distance\">Hamming Distance<a href=\"#hamming-distance\" title=\"Hamming Distance\"></a></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Hamming_Dist</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> weight = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            x &amp;= x - <span class=\"number\">1</span>;</span><br><span class=\"line\">            ++ weight;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> weight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">7</span>, y = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; Solution::Hamming_Dist(x, y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"single-number\">Single Number<a href=\"#single-number\" title=\"Single Number\"></a></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;nums.<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">            result = result ^ nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> my_nums[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">nums</span><span class=\"params\">(my_nums, my_nums + <span class=\"keyword\">sizeof</span>(my_nums) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) )</span></span>; <span class=\"comment\">// following C++98, the old fashion</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; Solution::singleNumber(nums);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"数据结构算法笔记：算法分析","link":"post/Algorithm Analysis"},"next":{"title":"Python小爬虫——网页pdf文档批量下载","link":"post/Python小爬虫——网页pdf文档批量下载"},"plink":"https://magi003769.github.io/post/Bit Operation/","toc":[{"id":"bit-operation","title":"Bit Operation","index":"1"},{"id":"boolean-algebra","title":"Boolean Algebra","index":"2","children":[{"id":"adder","title":"Adder","index":"2.1"},{"id":"comparator","title":"Comparator","index":"2.2"}]},{"id":"exercises","title":"Exercises","index":"3","children":[{"id":"addition-of-two-integers","title":"Addition of two integers","index":"3.1"},{"id":"hamming-weight","title":"Hamming Weight","index":"3.2"},{"id":"hamming-distance","title":"Hamming Distance","index":"3.3"},{"id":"single-number","title":"Single Number","index":"3.4"}]}]}